{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1643098152530},{"_id":"source/_posts/Docker总结（一）Docker基础.md","hash":"4e56d49c9a59462dd9b5266195149d7674764476","modified":1643180539432},{"_id":"source/.DS_Store","hash":"1a3976995e81eba693fb2c09eb8105b3ecc06bff","modified":1643331455230},{"_id":"source/_posts/Docker总结（三）storage driver.md","hash":"1a422640499994da8803b5e6402de06ac151207c","modified":1643182440160},{"_id":"source/_posts/Docker总结（二）Docker网络.md","hash":"eca292b027ec0af596c1c258e5bbd8ab3de729a0","modified":1643182415014},{"_id":"source/_posts/Docker总结（四）Trouble Shooting.md","hash":"010c8d74074e1a1ffb58b7da33ae760e7207e416","modified":1643182466302},{"_id":"source/_posts/JMeter源码分析（一）JMeter的架构.md","hash":"4b5039633379be60635c873c0cbddcdbe23dfad2","modified":1643098818192},{"_id":"source/_posts/Git基础操作.md","hash":"ef232e0a3a6fcea0802574577f99d807287ab763","modified":1643334861089},{"_id":"source/_posts/JMeter源码分析（二）JMeter的协议和Sampler.md","hash":"42369f7f32774b613358f565ae598c5f9bffc35f","modified":1643099179569},{"_id":"source/_posts/K8s（一）K8s与Docker简介.md","hash":"7fc5f53b82c946377078a1944cd444d4ecf11b23","modified":1643162756839},{"_id":"source/_posts/JMeter源码分析（三）JMeter的多线程模式.md","hash":"0f067d5b2a9f7e3512f566145c693cc4d148e19c","modified":1643099195111},{"_id":"source/_posts/Nginx基础操作.md","hash":"f649fe932eb56a6108717b554901c178e63ed4f3","modified":1643359471262},{"_id":"source/_posts/Kubernetes（二）搭建K8s集群.md","hash":"b51a8b66b37be3f5edb54ebb3441ebf940c1f7ba","modified":1643182504957},{"_id":"source/_posts/Linux监控指标.md","hash":"0b5be6c5e7571fd04de8d57e7be43f0d6fd976b2","modified":1643097990830},{"_id":"source/_posts/Python中的面向对象.md","hash":"6c0db9da2a3dd3d551a4559657bb60dc45bfbad1","modified":1643186349308},{"_id":"source/_posts/Python的内存机制.md","hash":"26a7ea15fc94279dc0f19346fc43fd5aef10ac56","modified":1643186329975},{"_id":"source/_posts/UI自动化的打开方式.md","hash":"70ca5a605b33b6c80d298db6199671a148636bc0","modified":1643186198047},{"_id":"source/_posts/基于jacoco的测试覆盖度.md","hash":"597bd59d2e2abd914b6e0d49452e0806ece72ea0","modified":1643171441685},{"_id":"source/_posts/性能需求分析与评估.md","hash":"2292d778219098d4fcb400a90b25f373d20c0405","modified":1643100100207},{"_id":"source/_posts/接口测试（一）聊聊接口测试.md","hash":"3a269ff571d09dde24a7de598e774a25b3e663c1","modified":1643091629342},{"_id":"source/_posts/测试框架中的设计模式实践.md","hash":"0df62812a1f90e5641e8a15375f8e520895609c4","modified":1643170808316},{"_id":"source/_posts/日常Linux使用总结.md","hash":"983f48c84ee332ac3d482e073cac0cb2ba8e8261","modified":1643270347256},{"_id":"source/_posts/测试中的Python多线程实践.md","hash":"d4206a1f429e9f6dcd500a209636e73081cb41bb","modified":1643186334894},{"_id":"source/_posts/测试需求分析.md","hash":"0161d30b1d5100583efc4aaa609712fad463ab6c","modified":1643099712302},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"d4a9648186e26c3bf1f51fa510dfa35cc2f89d29","modified":1642940198055},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"bcc8ee155d1e3c93b2b928949a81b0bc449ad4ad","modified":1643359484035},{"_id":"public/api/posts/2.json","hash":"f77b478ab5d797467b57fb8f7d9faae9c32c8f75","modified":1643359484035},{"_id":"public/api/articles/Nginx基础操作.json","hash":"87c51589d1d88c16502087b7f36f7c9a797c363b","modified":1643359484035},{"_id":"public/api/articles/日常Linux使用总结.json","hash":"7410a8d8c09530d711148f1bd8cfd89461413888","modified":1643359484035},{"_id":"public/api/articles/Git基础操作.json","hash":"548a799695515a0bc090ac168cd0770d61663cc6","modified":1643359484035},{"_id":"public/api/articles/测试中的Python多线程实践.json","hash":"d264844f19828dd450fb4b81741116896f92f39c","modified":1643359484035},{"_id":"public/api/articles/Docker总结（四）Trouble Shooting.json","hash":"a560d5feefb1b555e95530ab9d363484d95be354","modified":1643359484035},{"_id":"public/api/articles/Kubernetes（二）搭建K8s集群.json","hash":"df7829d8e924489c985c43cf13a4d6bf5edcb6af","modified":1643359484035},{"_id":"public/api/articles/Docker总结（三）storage driver.json","hash":"94f74fc9cf779ef7b68a5fdab0bbc4b6395d1801","modified":1643359484035},{"_id":"public/api/articles/Docker总结（二）Docker网络.json","hash":"200368542d2f39049359bd34ee58f0cd6195f472","modified":1643359484035},{"_id":"public/api/articles/Docker总结（一）Docker基础.json","hash":"3e9a7861b75e0b6a2c0199db81d7bb47009a5840","modified":1643359484035},{"_id":"public/api/articles/Python中的面向对象.json","hash":"b6d4136e6662f76e7fd2cf5797efdd73a7f5f3d6","modified":1643359484035},{"_id":"public/api/articles/UI自动化的打开方式.json","hash":"833927e48d1110709b0e2047ab5b9a6014ff11b4","modified":1643359484035},{"_id":"public/api/articles/基于jacoco的测试覆盖度.json","hash":"49a6ec1b9e9b5ffa0484dd4d345b1733ff589659","modified":1643359484035},{"_id":"public/api/articles/测试框架中的设计模式实践.json","hash":"6914da58645275f3638dea34a35982fd5a06036f","modified":1643359484035},{"_id":"public/api/articles/K8s（一）K8s与Docker简介.json","hash":"9f58f17c24a6632fde7f22bed7d7105a120fc2de","modified":1643359484035},{"_id":"public/api/articles/Python的内存机制.json","hash":"aeb1f694568b6a0470a4467c88bffe7b972f8087","modified":1643359484035},{"_id":"public/api/articles/性能需求分析与评估.json","hash":"3fda9dfc76c33d8b69c8e0a38631345069741905","modified":1643359484035},{"_id":"public/api/articles/测试需求分析.json","hash":"9a8ad894c78f7b321c1b634c4ca7527ac32bc2e0","modified":1643359484035},{"_id":"public/api/articles/JMeter源码分析（三）JMeter的多线程模式.json","hash":"0b7f7eae35ca5a29613927d887b966175f3f3638","modified":1643359484035},{"_id":"public/api/articles/JMeter源码分析（二）JMeter的协议和Sampler.json","hash":"dec08af7af1a748a4b85d12efc5ce0ace1ba8371","modified":1643359484035},{"_id":"public/api/articles/JMeter源码分析（一）JMeter的架构.json","hash":"dadebf78d3113ffae94e674c1bfb90c79a6aed45","modified":1643359484035},{"_id":"public/api/articles/Linux监控指标.json","hash":"968e629e5f2abebee271a566435553f2750b9a97","modified":1643359484035},{"_id":"public/api/articles/接口测试（一）聊聊接口测试.json","hash":"c914e15f57b3eb8cfcf51c4680a199a2fa8aa0fc","modified":1643359484035},{"_id":"public/api/features.json","hash":"b01c88972972db6b4a6b976b8c950a81626b7a5c","modified":1643359484035},{"_id":"public/api/authors/blog-author.json","hash":"3b8593528dcd956194b619e599b6e04419248b44","modified":1643359484035},{"_id":"public/api/site.json","hash":"2cca402666600383133da09b3ca0fb0a39d5c5d3","modified":1643359484035},{"_id":"public/api/categories.json","hash":"bad1be7f0734fe416263d652bb0f53118612087e","modified":1643359484035},{"_id":"public/api/categories/Docker.json","hash":"0c9fa05ca5e2cbc37ac541d2285f7230001e81ed","modified":1643359484035},{"_id":"public/api/categories/Git.json","hash":"3704531aaa79a133e0b56fff75d3ea1d1b1fcae0","modified":1643359484035},{"_id":"public/api/categories/性能.json","hash":"6d53ebc495726de4072035dc15a765367585b4d0","modified":1643359484035},{"_id":"public/api/categories/持续集成.json","hash":"ab0a6c7e2fb75a68cb88d9863b7f65e6162e292d","modified":1643359484035},{"_id":"public/api/categories/Kubernetes.json","hash":"20526d4f5825afa26020f0438c75e3353741db32","modified":1643359484035},{"_id":"public/api/categories/Linux.json","hash":"9c2c15a6db5b9e44459c2be2a800d2eb5fd5c7c7","modified":1643359484035},{"_id":"public/api/categories/Nginx.json","hash":"80a37f943b868984e638a207b55a4cad5aac063f","modified":1643359484035},{"_id":"public/api/categories/Python.json","hash":"619b841e1f09096827a1dfc98b0d3d955a9a2b63","modified":1643359484035},{"_id":"public/api/categories/测试开发.json","hash":"bb6ca7c3719ae1eeb5076dc7d4949b778d0fff35","modified":1643359484035},{"_id":"public/api/categories/jacoco.json","hash":"e1abf31b8151e4478ead3cfd748767a5a9b0c39b","modified":1643359484035},{"_id":"public/api/categories/设计模式.json","hash":"abbec1ef982bdd08ce4bc0cb19dbd02b10b378ba","modified":1643359484035},{"_id":"public/api/categories/软件测试.json","hash":"104f7b7c1ef44a4e388d7c0f61219bc84c50b483","modified":1643359484035},{"_id":"public/api/tags.json","hash":"57775956c6f423cbc15bac93e73db829cf9208f9","modified":1643359484035},{"_id":"public/api/tags/Docker基础.json","hash":"5838f3c3a47ac37db2335826c91685b44adc6a62","modified":1643359484035},{"_id":"public/api/tags/docker.json","hash":"98163f7d94718da153306cb5a267c4be103110b8","modified":1643359484035},{"_id":"public/api/tags/Docker网络.json","hash":"fae6c2361b51e99d79d4f0c05e275340da9e806d","modified":1643359484035},{"_id":"public/api/tags/分支管理.json","hash":"b0f4c7ff1d28acbc1bcd4947d962483686e131b9","modified":1643359484035},{"_id":"public/api/tags/版本管理.json","hash":"d858bc163914a09a66089d134fd52c89629fab29","modified":1643359484035},{"_id":"public/api/tags/JMeter.json","hash":"752dec3e84f60a2e7dcbd67a8aaa3e89f78fdd9e","modified":1643359484035},{"_id":"public/api/tags/源码.json","hash":"39c1d19095482147e671b8b1a68cd1d1f0647fef","modified":1643359484035},{"_id":"public/api/tags/环境治理.json","hash":"e3bdcb8857d70da3699504311cb4dee153b1ecba","modified":1643359484035},{"_id":"public/api/tags/Linux.json","hash":"9c2c15a6db5b9e44459c2be2a800d2eb5fd5c7c7","modified":1643359484035},{"_id":"public/api/tags/Nginx.json","hash":"80a37f943b868984e638a207b55a4cad5aac063f","modified":1643359484035},{"_id":"public/api/tags/工具.json","hash":"aef35e05eb183a90aa5e83edf87f45d0785d009e","modified":1643359484035},{"_id":"public/api/tags/python语法.json","hash":"1b534d8c3f6075c5e1f70a9ee9ec84233c221c8c","modified":1643359484035},{"_id":"public/api/tags/自动化.json","hash":"9443f82b8fe29c95f7891d49c102f92e621775d6","modified":1643359484035},{"_id":"public/api/tags/UI自动化.json","hash":"5717a3c5569f8dbf303790c867324d49b2b7ecd3","modified":1643359484035},{"_id":"public/api/tags/需求分析.json","hash":"98c942ae767159d78cfb5f0c20fad00151581dd0","modified":1643359484035},{"_id":"public/api/tags/测试分析.json","hash":"81cc8ce736f5bdce9e53fc0336f18ca47ec31f5e","modified":1643359484035},{"_id":"public/api/tags/覆盖度.json","hash":"5c47aa79ec01e5a3aa001996d31ef9db118619fd","modified":1643359484035},{"_id":"public/api/tags/java.json","hash":"fd3f887785c26f71377cf0561d7bb8b97e5930d1","modified":1643359484035},{"_id":"public/api/tags/精准测试.json","hash":"2739e4dc272681f5308b82da6b353a53cf5ba495","modified":1643359484035},{"_id":"public/api/tags/接口测试.json","hash":"bf7e59a1d3f6bd42cf985e1846ff20ca71141b8b","modified":1643359484035},{"_id":"public/api/tags/Shell.json","hash":"7dd36b8547da1ab42cf76bbd4fad497f7fc2c57f","modified":1643359484035},{"_id":"public/api/tags/多线程.json","hash":"5dcb16704c2923510ef14ec203a20769ebb1fe5d","modified":1643359484035},{"_id":"public/api/tags/设计模式.json","hash":"abbec1ef982bdd08ce4bc0cb19dbd02b10b378ba","modified":1643359484035},{"_id":"public/api/statistic.json","hash":"38f12f0f118618dbf10df98682a758412d9a60cc","modified":1643359484035},{"_id":"public/api/search.json","hash":"1785e19cf78eb3595a7f9de79ae8b62213f7371e","modified":1643359484035},{"_id":"public/post/Nginx基础操作.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Git基础操作.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/日常Linux使用总结.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/测试中的Python多线程实践.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Docker总结（四）Trouble Shooting.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Kubernetes（二）搭建K8s集群.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Docker总结（三）storage driver.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Docker总结（二）Docker网络.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Docker总结（一）Docker基础.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Python中的面向对象.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/UI自动化的打开方式.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/基于jacoco的测试覆盖度.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/测试框架中的设计模式实践.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/K8s（一）K8s与Docker简介.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Python的内存机制.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/性能需求分析与评估.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/测试需求分析.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/JMeter源码分析（三）JMeter的多线程模式.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/JMeter源码分析（二）JMeter的协议和Sampler.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/JMeter源码分析（一）JMeter的架构.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/Linux监控指标.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/post/接口测试（一）聊聊接口测试.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/page/2/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/page/3/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/tags/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/archives/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/tags/search/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1643359484035},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1643359484035},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1643359484035},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1643359484035},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1643359484035},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1643359484035},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1643359484035},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1643359484035},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1643359484035},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1643359484035},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1643359484035},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1643359484035},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1643359484035},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1643359484035},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1643359484035},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1643359484035},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1643359484035},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1643359484035},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1643359484035},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1643359484035},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1643359484035},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1643359484035},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1643359484035},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1643359484035},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1643359484035}],"Category":[{"name":"Docker","_id":"ckyy5t1r30002o80q7faoh9kh"},{"name":"Git","_id":"ckyy5t1rh000jo80q58j16cem"},{"name":"性能","_id":"ckyy5t1rl000qo80q2rnb9h4f"},{"name":"持续集成","_id":"ckyy5t1rz0017o80q69v77kj0"},{"name":"Kubernetes","_id":"ckyy5t1s3001eo80q5kunbq9f"},{"name":"Linux","_id":"ckyy5t1s6001mo80qeqsz2a9l"},{"name":"Nginx","_id":"ckyy5t1s8001qo80q2rl070v1"},{"name":"Python","_id":"ckyy5t1s9001vo80q3z2f4gz1"},{"name":"测试开发","_id":"ckyy5t1sb0022o80qdpjd0qal"},{"name":"jacoco","_id":"ckyy5t1sc0027o80qblvkf5o1"},{"name":"设计模式","_id":"ckyy5t1sg002mo80q88hd7jw6"},{"name":"软件测试","_id":"ckyy5t1si002ro80q0k3idjk7"}],"Data":[],"Page":[],"Post":[{"title":"Docker（一）Docker基础","date":"2022-01-26T07:02:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg","_content":"","source":"_posts/Docker总结（一）Docker基础.md","raw":"title: Docker（一）Docker基础\n\ndate: 2022-01-26 15:02:35\n\ntags:\n\n- Docker基础\n\ncategories:\n\n- Docker\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg\n\n---\n","slug":"Docker总结（一）Docker基础","published":1,"updated":"2022-01-26T07:02:19.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1qv0000o80qcwhmhxac","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Docker总结（三）storage driver","date":"2022-01-26T07:07:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg","_content":"","source":"_posts/Docker总结（三）storage driver.md","raw":"title: Docker总结（三）storage driver \n\ndate: 2022-01-26 15:07:35\n\ntags:\n\n- docker\n\ncategories:\n\n- Docker\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg\n\n---\n","slug":"Docker总结（三）storage driver","published":1,"updated":"2022-01-26T07:34:00.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1r10001o80q5dcl96dn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Docker总结（二）Docker网络","date":"2022-01-26T07:04:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg","_content":"","source":"_posts/Docker总结（二）Docker网络.md","raw":"title: Docker总结（二）Docker网络\n\ndate: 2022-01-26 15:04:35\n\ntags:\n\n- Docker网络\n\ncategories:\n\n- Docker\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg\n\n---\n","slug":"Docker总结（二）Docker网络","published":1,"updated":"2022-01-26T07:33:35.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1r50004o80q0rake0ru","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Docker总结（四）trouble shooting","date":"2022-01-26T07:10:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg","_content":"","source":"_posts/Docker总结（四）Trouble Shooting.md","raw":"title: Docker总结（四）trouble shooting\n\ndate: 2022-01-26 15:10:35\n\ntags:\n\n- docker\n\ncategories:\n\n- Docker\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/docker.jpg\n\n---\n","slug":"Docker总结（四）Trouble Shooting","published":1,"updated":"2022-01-26T07:34:26.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1r70005o80qaop39dtm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Git基础操作","date":"2022-01-27T07:58:57.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/git.jpg","_content":"","source":"_posts/Git基础操作.md","raw":"title: Git基础操作\ndate: 2022-01-27 15:58:57\ntags:\n- 分支管理\n- 版本管理\ncategories:\n- Git\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/git.jpg\n---","slug":"Git基础操作","published":1,"updated":"2022-01-28T01:54:21.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1r80006o80qhbuc8u2j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JMeter源码分析（一）JMeter的架构","date":"2022-01-25T04:33:57.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg","_content":"","source":"_posts/JMeter源码分析（一）JMeter的架构.md","raw":"title: JMeter源码分析（一）JMeter的架构\n\ndate: 2022-01-25 12:33:57\n\ntags:\n\n- JMeter\n- 源码\n\ncategories:\n\n- 性能\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg\n\n---\n","slug":"JMeter源码分析（一）JMeter的架构","published":1,"updated":"2022-01-25T08:20:18.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rb000ao80q33wy1l0u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JMeter源码分析（三）JMeter的多线程模式","date":"2022-01-25T08:23:53.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg","_content":"\n\n","source":"_posts/JMeter源码分析（三）JMeter的多线程模式.md","raw":"title: JMeter源码分析（三）JMeter的多线程模式\n\ndate: 2022-01-25 16:23:53\n\ntags:\n\n- JMeter\n- 源码\n\ncategories:\n\n- 性能\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg\n\n---\n\n\n","slug":"JMeter源码分析（三）JMeter的多线程模式","published":1,"updated":"2022-01-25T08:26:35.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rd000bo80qaz77gar9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JMeter源码分析（二）JMeter的协议和Sampler","date":"2022-01-25T08:22:53.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg","_content":"\n## JMeter源码分析（二）JMeter的协议和Sampler\n","source":"_posts/JMeter源码分析（二）JMeter的协议和Sampler.md","raw":"title: JMeter源码分析（二）JMeter的协议和Sampler\n\ndate: 2022-01-25 16:22:53\n\ntags:\n\n- JMeter\n- 源码\n\ncategories:\n\n- 性能\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/JMeter图片.jpg\n\n---\n\n## JMeter源码分析（二）JMeter的协议和Sampler\n","slug":"JMeter源码分析（二）JMeter的协议和Sampler","published":1,"updated":"2022-01-25T08:26:19.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rf000fo80q2pj41zb7","content":"<h2 id=\"JMeter源码分析（二）JMeter的协议和Sampler\"><a href=\"#JMeter源码分析（二）JMeter的协议和Sampler\" class=\"headerlink\" title=\"JMeter源码分析（二）JMeter的协议和Sampler\"></a>JMeter源码分析（二）JMeter的协议和Sampler</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JMeter源码分析（二）JMeter的协议和Sampler\"><a href=\"#JMeter源码分析（二）JMeter的协议和Sampler\" class=\"headerlink\" title=\"JMeter源码分析（二）JMeter的协议和Sampler\"></a>JMeter源码分析（二）JMeter的协议和Sampler</h2>"},{"title":"Kubernetess（一）K8s与Docker简介","date":"2022-01-25T08:40:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/k8s.jpg","_content":"\n\n","source":"_posts/K8s（一）K8s与Docker简介.md","raw":"title: Kubernetess（一）K8s与Docker简介\n\ndate: 2022-01-25 16:40:35\n\ntags:\n\n- 环境治理\n\ncategories:\n\n- 持续集成\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/k8s.jpg\n\n---\n\n\n","slug":"K8s（一）K8s与Docker简介","published":1,"updated":"2022-01-26T02:05:56.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rh000io80q2y7qaqdt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Kubernetes（二）搭建K8s集群","date":"2022-01-26T07:10:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/k8s.jpg","_content":"","source":"_posts/Kubernetes（二）搭建K8s集群.md","raw":"title: Kubernetes（二）搭建K8s集群\n\ndate: 2022-01-26 15:10:35\n\ntags:\n\n- docker\n\ncategories:\n\n- Kubernetes\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/k8s.jpg\n\n---\n","slug":"Kubernetes（二）搭建K8s集群","published":1,"updated":"2022-01-26T07:35:04.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1ri000mo80q3habajga","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Linux监控指标","date":"2022-01-25T04:33:57.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/Linux.jpg","_content":"\n## Linux监控指标\n\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33981643097669_.pic.jpg)\n\n### 工具使用\n\n#### 1、lscpu\n","source":"_posts/Linux监控指标.md","raw":"title: Linux监控指标\n\ndate: 2022-01-25 12:33:57\n\ntags:\n\n- Linux\n\n- \n\ncategories:\n\n- Linux\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/Linux.jpg\n\n---\n\n## Linux监控指标\n\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33981643097669_.pic.jpg)\n\n### 工具使用\n\n#### 1、lscpu\n","slug":"Linux监控指标","published":1,"updated":"2022-01-25T08:06:30.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rk000oo80q3fgn3lgw","content":"<h2 id=\"Linux监控指标\"><a href=\"#Linux监控指标\" class=\"headerlink\" title=\"Linux监控指标\"></a>Linux监控指标</h2><p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33981643097669_.pic.jpg\"></p>\n<h3 id=\"工具使用\"><a href=\"#工具使用\" class=\"headerlink\" title=\"工具使用\"></a>工具使用</h3><h4 id=\"1、lscpu\"><a href=\"#1、lscpu\" class=\"headerlink\" title=\"1、lscpu\"></a>1、lscpu</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux监控指标\"><a href=\"#Linux监控指标\" class=\"headerlink\" title=\"Linux监控指标\"></a>Linux监控指标</h2><p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33981643097669_.pic.jpg\"></p>\n<h3 id=\"工具使用\"><a href=\"#工具使用\" class=\"headerlink\" title=\"工具使用\"></a>工具使用</h3><h4 id=\"1、lscpu\"><a href=\"#1、lscpu\" class=\"headerlink\" title=\"1、lscpu\"></a>1、lscpu</h4>"},{"title":"Nginx基础操作","date":"2022-01-28T08:38:57.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/nginx.jpg","_content":"```shell\n#快速启动一个Nginx\ndocker run --name nginx-learn -p 80:80 -d nginx\n```\n### 1.常用命令\n```shell\n#常用命令\n-T: 查看当前nginx的配置\n-s: 向master进程发送指令: \n    stop: 关闭\n    quit: 当前工作处理完成后关闭\n    reopen: 重启\n    reload: 重载配置文件，热重启\n```\n### 2.语法\n- 每条指令以 ; 结尾，指令与参数之间以空格区隔\n- 指令块放在 {} 中\n- include 允许引用外部的配置文件\n- 使用 # 符号添加注释\n- 使用 $ 符号使用变量\n- 部分指令的参数支持正则表达式\n\n### 3.全局变量\n```shell\n#请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口\n$host\n#客户端请求类型，如 GET、POST\n$request_method\n#客户端的 IP 地址\n$remote_addr\n#请求中的参数\n$args\n#请求中变量名 PARAMETER 参数的值\n$arg_PARAMETERGET\n#请求头中的 Content-length 字段\n$content_length\n#客户端agent信息\n$http_user_agent\n#客户端cookie信息\n$http_cookie\n#客户端的IP地址\n$remote_addr\n#客户端的端口\n$remote_port\n#客户端agent信息\n$http_user_agent\n#请求使用的协议，如 HTTP/1.0、HTTP/1.1\n$server_protocol\n#服务器地址\n$server_addr\n#服务器名称\n$server_name\n#服务器的端口号\n$server_port\n#方法（如http，https）\n$schemeHTTP \n```\n### 4.配置文件\nnginx.conf示例：\n```shell\n#全局块，此处配置全局生效\ndaemon on;\nuser nobody;\nwork_process 2;\npid logs/nginx.pid;\nerror_log logs/error.log debug;\n#events块\nevents {\n    #此处是处理连接的配置\n    #此处配置影响性能\n    worker_connections 1024;\n}\n#http块\nhttp {\n    # 最常用部分，代理、缓存、日志等配置  \n    include test.conf;\n    keepalive_timeout = 10;\n    #server块\n    server {\n        # 监听端口\n        listen 80\n        # 域名配置\n        server_name localhost\n        #location块\n        location /one {\n            # 配置请求路径是'/one'的代理\n        }\n        #同一个server块下可以有多个location块\n        location /two {\n            # 配置请求路径是'/two'的代理\n        }\n    } \n    #同一个http块下可以有多个server块\n    server {\n        # 配置另一个服务的代理\n    }\n}\n```\n#### 4-1.全局块\n一般位于events块之前，通常配置内容包括：\n##### daemon\n```shell\n#以守护模式运行Nginx\ndaemon on;\n```\n##### user\n```shell\n#Nginx的用户\n#用法\nuser [用户名] [用户组]\n#示例: 允许root组的admin用户访问\nuser admin root\n## user在Windows中不生效\nuser nobody 或者 # user xx 代表所有用户都可以运行\n```\n##### work_process\n```shell\n#配置工作线程数，一般与服务器的CPU核数保持一致\n#用法\nworker_process [线程数] | auto\n#示例: 指定2个线程\nworker_process 2;\n```\n##### pid\n```shell\n#Nginx 主进程Pid的记录位置\n#用法\npid [路径]\n#示例\npid logs/nginx.pid\n```\n##### error_log\n```shell\n#日志保存路径\n#用法\nerror_log [路径] [日志级别,常用的级别：debug|info|error|warn]\n#示例\nerror_log logs/error.log error\nerror_log logs/info.log info\n```\n#引入的配置文件\n\n#### 4-2.events块\n##### worker_connections\n```shell\n#配置单个worker的最大连接数\nworker_connections 2000;\n```\n##### 工作模式\n```shell\nuse epoll|select|poll|kqueue...\n```\n\n#### 4-3.http块\n##### client_max_body_size\n```shell\n\n```\n##### keepalive_timeout\n```shell\n\n```\n#### 负载均衡\n#### 动静分离\n#### 高可用\n### 最佳实践参考\n### 使用注意\n#### 1.路径配置\n```text\n# 例子1\nserver {\n    listen 8080;\n    server_name 192.168.0.222;\n    \n    location /api {\n                proxy_pass   http://192.168.1.123:9000;  \n            }\n        \n# 例子2\nserver {\n    listen 8080;\n    server_name 192.168.2.222;\n    \n    location /api {\n                proxy_pass   http://192.168.1.123:9000/;  \n            }\n```\n**注意location后面路径的 / 和proxy_pass路径的 /**\n\n```text\n#例子1：\n#请求：\nhttp://192.168.0.222:8080/api/user/login\n#nginx处理后的请求：\nhttp://192.168.1.123:9000/api/user/login\n#例子2：\n#请求：\nhttp://192.168.0.222:8080/api/user/login\n#nginx处理后的请求：\nhttp://192.168.1.123:9000//user/login\n```\n例子1与例子2的区别是例子2中的proxy_pass除了IP和Port外，还配置了上下文，这里的规则是：\n1、如果proxy_pass中的路径存在上下文(即端口后存在/)：\n- 替换IP和Port；\n- 将location中的路径替换为上下文；\n- 拼接余下的路径；\n\n2、如果proxy_pass中的路径不存在上下文(即端口后没有/及后续路径)：\n- 替换IP和Port，其余不动；","source":"_posts/Nginx基础操作.md","raw":"title: Nginx基础操作\ndate: 2022-01-28 16:38:57\ntags:\n- Nginx\n- 工具\ncategories:\n- Nginx\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/nginx.jpg\n---\n```shell\n#快速启动一个Nginx\ndocker run --name nginx-learn -p 80:80 -d nginx\n```\n### 1.常用命令\n```shell\n#常用命令\n-T: 查看当前nginx的配置\n-s: 向master进程发送指令: \n    stop: 关闭\n    quit: 当前工作处理完成后关闭\n    reopen: 重启\n    reload: 重载配置文件，热重启\n```\n### 2.语法\n- 每条指令以 ; 结尾，指令与参数之间以空格区隔\n- 指令块放在 {} 中\n- include 允许引用外部的配置文件\n- 使用 # 符号添加注释\n- 使用 $ 符号使用变量\n- 部分指令的参数支持正则表达式\n\n### 3.全局变量\n```shell\n#请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口\n$host\n#客户端请求类型，如 GET、POST\n$request_method\n#客户端的 IP 地址\n$remote_addr\n#请求中的参数\n$args\n#请求中变量名 PARAMETER 参数的值\n$arg_PARAMETERGET\n#请求头中的 Content-length 字段\n$content_length\n#客户端agent信息\n$http_user_agent\n#客户端cookie信息\n$http_cookie\n#客户端的IP地址\n$remote_addr\n#客户端的端口\n$remote_port\n#客户端agent信息\n$http_user_agent\n#请求使用的协议，如 HTTP/1.0、HTTP/1.1\n$server_protocol\n#服务器地址\n$server_addr\n#服务器名称\n$server_name\n#服务器的端口号\n$server_port\n#方法（如http，https）\n$schemeHTTP \n```\n### 4.配置文件\nnginx.conf示例：\n```shell\n#全局块，此处配置全局生效\ndaemon on;\nuser nobody;\nwork_process 2;\npid logs/nginx.pid;\nerror_log logs/error.log debug;\n#events块\nevents {\n    #此处是处理连接的配置\n    #此处配置影响性能\n    worker_connections 1024;\n}\n#http块\nhttp {\n    # 最常用部分，代理、缓存、日志等配置  \n    include test.conf;\n    keepalive_timeout = 10;\n    #server块\n    server {\n        # 监听端口\n        listen 80\n        # 域名配置\n        server_name localhost\n        #location块\n        location /one {\n            # 配置请求路径是'/one'的代理\n        }\n        #同一个server块下可以有多个location块\n        location /two {\n            # 配置请求路径是'/two'的代理\n        }\n    } \n    #同一个http块下可以有多个server块\n    server {\n        # 配置另一个服务的代理\n    }\n}\n```\n#### 4-1.全局块\n一般位于events块之前，通常配置内容包括：\n##### daemon\n```shell\n#以守护模式运行Nginx\ndaemon on;\n```\n##### user\n```shell\n#Nginx的用户\n#用法\nuser [用户名] [用户组]\n#示例: 允许root组的admin用户访问\nuser admin root\n## user在Windows中不生效\nuser nobody 或者 # user xx 代表所有用户都可以运行\n```\n##### work_process\n```shell\n#配置工作线程数，一般与服务器的CPU核数保持一致\n#用法\nworker_process [线程数] | auto\n#示例: 指定2个线程\nworker_process 2;\n```\n##### pid\n```shell\n#Nginx 主进程Pid的记录位置\n#用法\npid [路径]\n#示例\npid logs/nginx.pid\n```\n##### error_log\n```shell\n#日志保存路径\n#用法\nerror_log [路径] [日志级别,常用的级别：debug|info|error|warn]\n#示例\nerror_log logs/error.log error\nerror_log logs/info.log info\n```\n#引入的配置文件\n\n#### 4-2.events块\n##### worker_connections\n```shell\n#配置单个worker的最大连接数\nworker_connections 2000;\n```\n##### 工作模式\n```shell\nuse epoll|select|poll|kqueue...\n```\n\n#### 4-3.http块\n##### client_max_body_size\n```shell\n\n```\n##### keepalive_timeout\n```shell\n\n```\n#### 负载均衡\n#### 动静分离\n#### 高可用\n### 最佳实践参考\n### 使用注意\n#### 1.路径配置\n```text\n# 例子1\nserver {\n    listen 8080;\n    server_name 192.168.0.222;\n    \n    location /api {\n                proxy_pass   http://192.168.1.123:9000;  \n            }\n        \n# 例子2\nserver {\n    listen 8080;\n    server_name 192.168.2.222;\n    \n    location /api {\n                proxy_pass   http://192.168.1.123:9000/;  \n            }\n```\n**注意location后面路径的 / 和proxy_pass路径的 /**\n\n```text\n#例子1：\n#请求：\nhttp://192.168.0.222:8080/api/user/login\n#nginx处理后的请求：\nhttp://192.168.1.123:9000/api/user/login\n#例子2：\n#请求：\nhttp://192.168.0.222:8080/api/user/login\n#nginx处理后的请求：\nhttp://192.168.1.123:9000//user/login\n```\n例子1与例子2的区别是例子2中的proxy_pass除了IP和Port外，还配置了上下文，这里的规则是：\n1、如果proxy_pass中的路径存在上下文(即端口后存在/)：\n- 替换IP和Port；\n- 将location中的路径替换为上下文；\n- 拼接余下的路径；\n\n2、如果proxy_pass中的路径不存在上下文(即端口后没有/及后续路径)：\n- 替换IP和Port，其余不动；","slug":"Nginx基础操作","published":1,"updated":"2022-01-28T08:44:31.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rm000to80q7a488x9z","content":"<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#快速启动一个Nginx\ndocker run --name nginx-learn -p 80:80 -d nginx</code></pre>\n<h3 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1.常用命令\"></a>1.常用命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用命令\n-T: 查看当前nginx的配置\n-s: 向master进程发送指令: \n    stop: 关闭\n    quit: 当前工作处理完成后关闭\n    reopen: 重启\n    reload: 重载配置文件，热重启</code></pre>\n<h3 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h3><ul>\n<li>每条指令以 ; 结尾，指令与参数之间以空格区隔</li>\n<li>指令块放在 {} 中</li>\n<li>include 允许引用外部的配置文件</li>\n<li>使用 # 符号添加注释</li>\n<li>使用 $ 符号使用变量</li>\n<li>部分指令的参数支持正则表达式</li>\n</ul>\n<h3 id=\"3-全局变量\"><a href=\"#3-全局变量\" class=\"headerlink\" title=\"3.全局变量\"></a>3.全局变量</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口\n$host\n#客户端请求类型，如 GET、POST\n$request_method\n#客户端的 IP 地址\n$remote_addr\n#请求中的参数\n$args\n#请求中变量名 PARAMETER 参数的值\n$arg_PARAMETERGET\n#请求头中的 Content-length 字段\n$content_length\n#客户端agent信息\n$http_user_agent\n#客户端cookie信息\n$http_cookie\n#客户端的IP地址\n$remote_addr\n#客户端的端口\n$remote_port\n#客户端agent信息\n$http_user_agent\n#请求使用的协议，如 HTTP&#x2F;1.0、HTTP&#x2F;1.1\n$server_protocol\n#服务器地址\n$server_addr\n#服务器名称\n$server_name\n#服务器的端口号\n$server_port\n#方法（如http，https）\n$schemeHTTP </code></pre>\n<h3 id=\"4-配置文件\"><a href=\"#4-配置文件\" class=\"headerlink\" title=\"4.配置文件\"></a>4.配置文件</h3><p>nginx.conf示例：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#全局块，此处配置全局生效\ndaemon on;\nuser nobody;\nwork_process 2;\npid logs&#x2F;nginx.pid;\nerror_log logs&#x2F;error.log debug;\n#events块\nevents &#123;\n    #此处是处理连接的配置\n    #此处配置影响性能\n    worker_connections 1024;\n&#125;\n#http块\nhttp &#123;\n    # 最常用部分，代理、缓存、日志等配置  \n    include test.conf;\n    keepalive_timeout &#x3D; 10;\n    #server块\n    server &#123;\n        # 监听端口\n        listen 80\n        # 域名配置\n        server_name localhost\n        #location块\n        location &#x2F;one &#123;\n            # 配置请求路径是&#39;&#x2F;one&#39;的代理\n        &#125;\n        #同一个server块下可以有多个location块\n        location &#x2F;two &#123;\n            # 配置请求路径是&#39;&#x2F;two&#39;的代理\n        &#125;\n    &#125; \n    #同一个http块下可以有多个server块\n    server &#123;\n        # 配置另一个服务的代理\n    &#125;\n&#125;</code></pre>\n<h4 id=\"4-1-全局块\"><a href=\"#4-1-全局块\" class=\"headerlink\" title=\"4-1.全局块\"></a>4-1.全局块</h4><p>一般位于events块之前，通常配置内容包括：</p>\n<h5 id=\"daemon\"><a href=\"#daemon\" class=\"headerlink\" title=\"daemon\"></a>daemon</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#以守护模式运行Nginx\ndaemon on;</code></pre>\n<h5 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#Nginx的用户\n#用法\nuser [用户名] [用户组]\n#示例: 允许root组的admin用户访问\nuser admin root\n## user在Windows中不生效\nuser nobody 或者 # user xx 代表所有用户都可以运行</code></pre>\n<h5 id=\"work-process\"><a href=\"#work-process\" class=\"headerlink\" title=\"work_process\"></a>work_process</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#配置工作线程数，一般与服务器的CPU核数保持一致\n#用法\nworker_process [线程数] | auto\n#示例: 指定2个线程\nworker_process 2;</code></pre>\n<h5 id=\"pid\"><a href=\"#pid\" class=\"headerlink\" title=\"pid\"></a>pid</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#Nginx 主进程Pid的记录位置\n#用法\npid [路径]\n#示例\npid logs&#x2F;nginx.pid</code></pre>\n<h5 id=\"error-log\"><a href=\"#error-log\" class=\"headerlink\" title=\"error_log\"></a>error_log</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#日志保存路径\n#用法\nerror_log [路径] [日志级别,常用的级别：debug|info|error|warn]\n#示例\nerror_log logs&#x2F;error.log error\nerror_log logs&#x2F;info.log info</code></pre>\n<p>#引入的配置文件</p>\n<h4 id=\"4-2-events块\"><a href=\"#4-2-events块\" class=\"headerlink\" title=\"4-2.events块\"></a>4-2.events块</h4><h5 id=\"worker-connections\"><a href=\"#worker-connections\" class=\"headerlink\" title=\"worker_connections\"></a>worker_connections</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#配置单个worker的最大连接数\nworker_connections 2000;</code></pre>\n<h5 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">use epoll|select|poll|kqueue...</code></pre>\n\n<h4 id=\"4-3-http块\"><a href=\"#4-3-http块\" class=\"headerlink\" title=\"4-3.http块\"></a>4-3.http块</h4><h5 id=\"client-max-body-size\"><a href=\"#client-max-body-size\" class=\"headerlink\" title=\"client_max_body_size\"></a>client_max_body_size</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"></code></pre>\n<h5 id=\"keepalive-timeout\"><a href=\"#keepalive-timeout\" class=\"headerlink\" title=\"keepalive_timeout\"></a>keepalive_timeout</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"></code></pre>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><h4 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h4><h4 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h4><h3 id=\"最佳实践参考\"><a href=\"#最佳实践参考\" class=\"headerlink\" title=\"最佳实践参考\"></a>最佳实践参考</h3><h3 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h3><h4 id=\"1-路径配置\"><a href=\"#1-路径配置\" class=\"headerlink\" title=\"1.路径配置\"></a>1.路径配置</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"># 例子1\nserver &#123;\n    listen 8080;\n    server_name 192.168.0.222;\n    \n    location &#x2F;api &#123;\n                proxy_pass   http:&#x2F;&#x2F;192.168.1.123:9000;  \n            &#125;\n        \n# 例子2\nserver &#123;\n    listen 8080;\n    server_name 192.168.2.222;\n    \n    location &#x2F;api &#123;\n                proxy_pass   http:&#x2F;&#x2F;192.168.1.123:9000&#x2F;;  \n            &#125;</code></pre>\n<p><strong>注意location后面路径的 / 和proxy_pass路径的 /</strong></p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">#例子1：\n#请求：\nhttp:&#x2F;&#x2F;192.168.0.222:8080&#x2F;api&#x2F;user&#x2F;login\n#nginx处理后的请求：\nhttp:&#x2F;&#x2F;192.168.1.123:9000&#x2F;api&#x2F;user&#x2F;login\n#例子2：\n#请求：\nhttp:&#x2F;&#x2F;192.168.0.222:8080&#x2F;api&#x2F;user&#x2F;login\n#nginx处理后的请求：\nhttp:&#x2F;&#x2F;192.168.1.123:9000&#x2F;&#x2F;user&#x2F;login</code></pre>\n<p>例子1与例子2的区别是例子2中的proxy_pass除了IP和Port外，还配置了上下文，这里的规则是：<br>1、如果proxy_pass中的路径存在上下文(即端口后存在/)：</p>\n<ul>\n<li>替换IP和Port；</li>\n<li>将location中的路径替换为上下文；</li>\n<li>拼接余下的路径；</li>\n</ul>\n<p>2、如果proxy_pass中的路径不存在上下文(即端口后没有/及后续路径)：</p>\n<ul>\n<li>替换IP和Port，其余不动；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#快速启动一个Nginx\ndocker run --name nginx-learn -p 80:80 -d nginx</code></pre>\n<h3 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1.常用命令\"></a>1.常用命令</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用命令\n-T: 查看当前nginx的配置\n-s: 向master进程发送指令: \n    stop: 关闭\n    quit: 当前工作处理完成后关闭\n    reopen: 重启\n    reload: 重载配置文件，热重启</code></pre>\n<h3 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h3><ul>\n<li>每条指令以 ; 结尾，指令与参数之间以空格区隔</li>\n<li>指令块放在 {} 中</li>\n<li>include 允许引用外部的配置文件</li>\n<li>使用 # 符号添加注释</li>\n<li>使用 $ 符号使用变量</li>\n<li>部分指令的参数支持正则表达式</li>\n</ul>\n<h3 id=\"3-全局变量\"><a href=\"#3-全局变量\" class=\"headerlink\" title=\"3.全局变量\"></a>3.全局变量</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口\n$host\n#客户端请求类型，如 GET、POST\n$request_method\n#客户端的 IP 地址\n$remote_addr\n#请求中的参数\n$args\n#请求中变量名 PARAMETER 参数的值\n$arg_PARAMETERGET\n#请求头中的 Content-length 字段\n$content_length\n#客户端agent信息\n$http_user_agent\n#客户端cookie信息\n$http_cookie\n#客户端的IP地址\n$remote_addr\n#客户端的端口\n$remote_port\n#客户端agent信息\n$http_user_agent\n#请求使用的协议，如 HTTP&#x2F;1.0、HTTP&#x2F;1.1\n$server_protocol\n#服务器地址\n$server_addr\n#服务器名称\n$server_name\n#服务器的端口号\n$server_port\n#方法（如http，https）\n$schemeHTTP </code></pre>\n<h3 id=\"4-配置文件\"><a href=\"#4-配置文件\" class=\"headerlink\" title=\"4.配置文件\"></a>4.配置文件</h3><p>nginx.conf示例：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#全局块，此处配置全局生效\ndaemon on;\nuser nobody;\nwork_process 2;\npid logs&#x2F;nginx.pid;\nerror_log logs&#x2F;error.log debug;\n#events块\nevents &#123;\n    #此处是处理连接的配置\n    #此处配置影响性能\n    worker_connections 1024;\n&#125;\n#http块\nhttp &#123;\n    # 最常用部分，代理、缓存、日志等配置  \n    include test.conf;\n    keepalive_timeout &#x3D; 10;\n    #server块\n    server &#123;\n        # 监听端口\n        listen 80\n        # 域名配置\n        server_name localhost\n        #location块\n        location &#x2F;one &#123;\n            # 配置请求路径是&#39;&#x2F;one&#39;的代理\n        &#125;\n        #同一个server块下可以有多个location块\n        location &#x2F;two &#123;\n            # 配置请求路径是&#39;&#x2F;two&#39;的代理\n        &#125;\n    &#125; \n    #同一个http块下可以有多个server块\n    server &#123;\n        # 配置另一个服务的代理\n    &#125;\n&#125;</code></pre>\n<h4 id=\"4-1-全局块\"><a href=\"#4-1-全局块\" class=\"headerlink\" title=\"4-1.全局块\"></a>4-1.全局块</h4><p>一般位于events块之前，通常配置内容包括：</p>\n<h5 id=\"daemon\"><a href=\"#daemon\" class=\"headerlink\" title=\"daemon\"></a>daemon</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#以守护模式运行Nginx\ndaemon on;</code></pre>\n<h5 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#Nginx的用户\n#用法\nuser [用户名] [用户组]\n#示例: 允许root组的admin用户访问\nuser admin root\n## user在Windows中不生效\nuser nobody 或者 # user xx 代表所有用户都可以运行</code></pre>\n<h5 id=\"work-process\"><a href=\"#work-process\" class=\"headerlink\" title=\"work_process\"></a>work_process</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#配置工作线程数，一般与服务器的CPU核数保持一致\n#用法\nworker_process [线程数] | auto\n#示例: 指定2个线程\nworker_process 2;</code></pre>\n<h5 id=\"pid\"><a href=\"#pid\" class=\"headerlink\" title=\"pid\"></a>pid</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#Nginx 主进程Pid的记录位置\n#用法\npid [路径]\n#示例\npid logs&#x2F;nginx.pid</code></pre>\n<h5 id=\"error-log\"><a href=\"#error-log\" class=\"headerlink\" title=\"error_log\"></a>error_log</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#日志保存路径\n#用法\nerror_log [路径] [日志级别,常用的级别：debug|info|error|warn]\n#示例\nerror_log logs&#x2F;error.log error\nerror_log logs&#x2F;info.log info</code></pre>\n<p>#引入的配置文件</p>\n<h4 id=\"4-2-events块\"><a href=\"#4-2-events块\" class=\"headerlink\" title=\"4-2.events块\"></a>4-2.events块</h4><h5 id=\"worker-connections\"><a href=\"#worker-connections\" class=\"headerlink\" title=\"worker_connections\"></a>worker_connections</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#配置单个worker的最大连接数\nworker_connections 2000;</code></pre>\n<h5 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">use epoll|select|poll|kqueue...</code></pre>\n\n<h4 id=\"4-3-http块\"><a href=\"#4-3-http块\" class=\"headerlink\" title=\"4-3.http块\"></a>4-3.http块</h4><h5 id=\"client-max-body-size\"><a href=\"#client-max-body-size\" class=\"headerlink\" title=\"client_max_body_size\"></a>client_max_body_size</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"></code></pre>\n<h5 id=\"keepalive-timeout\"><a href=\"#keepalive-timeout\" class=\"headerlink\" title=\"keepalive_timeout\"></a>keepalive_timeout</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"></code></pre>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><h4 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h4><h4 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h4><h3 id=\"最佳实践参考\"><a href=\"#最佳实践参考\" class=\"headerlink\" title=\"最佳实践参考\"></a>最佳实践参考</h3><h3 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h3><h4 id=\"1-路径配置\"><a href=\"#1-路径配置\" class=\"headerlink\" title=\"1.路径配置\"></a>1.路径配置</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"># 例子1\nserver &#123;\n    listen 8080;\n    server_name 192.168.0.222;\n    \n    location &#x2F;api &#123;\n                proxy_pass   http:&#x2F;&#x2F;192.168.1.123:9000;  \n            &#125;\n        \n# 例子2\nserver &#123;\n    listen 8080;\n    server_name 192.168.2.222;\n    \n    location &#x2F;api &#123;\n                proxy_pass   http:&#x2F;&#x2F;192.168.1.123:9000&#x2F;;  \n            &#125;</code></pre>\n<p><strong>注意location后面路径的 / 和proxy_pass路径的 /</strong></p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">#例子1：\n#请求：\nhttp:&#x2F;&#x2F;192.168.0.222:8080&#x2F;api&#x2F;user&#x2F;login\n#nginx处理后的请求：\nhttp:&#x2F;&#x2F;192.168.1.123:9000&#x2F;api&#x2F;user&#x2F;login\n#例子2：\n#请求：\nhttp:&#x2F;&#x2F;192.168.0.222:8080&#x2F;api&#x2F;user&#x2F;login\n#nginx处理后的请求：\nhttp:&#x2F;&#x2F;192.168.1.123:9000&#x2F;&#x2F;user&#x2F;login</code></pre>\n<p>例子1与例子2的区别是例子2中的proxy_pass除了IP和Port外，还配置了上下文，这里的规则是：<br>1、如果proxy_pass中的路径存在上下文(即端口后存在/)：</p>\n<ul>\n<li>替换IP和Port；</li>\n<li>将location中的路径替换为上下文；</li>\n<li>拼接余下的路径；</li>\n</ul>\n<p>2、如果proxy_pass中的路径不存在上下文(即端口后没有/及后续路径)：</p>\n<ul>\n<li>替换IP和Port，其余不动；</li>\n</ul>\n"},{"title":"Python中的面向对象","date":"2022-01-26T04:11:25.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg","_content":"","source":"_posts/Python中的面向对象.md","raw":"title: Python中的面向对象\n\ndate: 2022-01-26 12:11:25\n\ntags:\n\n- python语法\n\ncategories:\n\n- Python\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg\n\n---\n","slug":"Python中的面向对象","published":1,"updated":"2022-01-26T08:39:09.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rs000vo80qd2zueamz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Python的内存机制","date":"2022-01-25T08:40:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg","_content":"","source":"_posts/Python的内存机制.md","raw":"title: Python的内存机制\n\ndate: 2022-01-25 16:40:35\n\ntags:\n\n- python语法\n\ncategories:\n\n- Python\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg\n---\n","slug":"Python的内存机制","published":1,"updated":"2022-01-26T08:38:49.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1ru000zo80q9z97gdc0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"UI自动化的打开方式","date":"2022-01-26T04:11:25.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/UI自动化.jpg","_content":"\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34101643185937_.pic.jpg)\n","source":"_posts/UI自动化的打开方式.md","raw":"title: UI自动化的打开方式\n\ndate: 2022-01-26 12:11:25\n\ntags:\n\n- 自动化\n\n- UI自动化\n\ncategories:\n\n- 测试开发\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/UI自动化.jpg\n\n---\n\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34101643185937_.pic.jpg)\n","slug":"UI自动化的打开方式","published":1,"updated":"2022-01-26T08:36:38.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rw0010o80qati85a03","content":"<p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34101643185937_.pic.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34101643185937_.pic.jpg\"></p>\n"},{"title":"性能需求分析与评估","date":"2022-01-25T08:40:35.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg","_content":"","source":"_posts/性能需求分析与评估.md","raw":"title: 性能需求分析与评估\n\ndate: 2022-01-25 16:40:35\n\ntags:\n\n- 需求分析\n\n- 测试分析\n\ncategories:\n\n- 性能\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg\n\n---\n","slug":"性能需求分析与评估","published":1,"updated":"2022-01-25T08:41:40.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1rx0013o80qdptbf13u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于jacoco的测试覆盖度","date":"2022-01-26T04:11:25.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34051643171379_.pic.jpg","_content":"","source":"_posts/基于jacoco的测试覆盖度.md","raw":"title: 基于jacoco的测试覆盖度\n\ndate: 2022-01-26 12:11:25\n\ntags:\n\n- java\n- 覆盖度\n- 精准测试\n\ncategories:\n\n- jacoco\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/34051643171379_.pic.jpg\n---\n","slug":"基于jacoco的测试覆盖度","published":1,"updated":"2022-01-26T04:30:41.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1ry0016o80q3rsxggh3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"接口测试（一）聊聊接口测试","date":"2022-01-20T10:49:36.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/API接口.jpg","_content":"\n    接口测试是个讨论度和普及度很高的话题了，只要身处这个行业，无论了解到什么程度，都能聊几句接口测试。不过即便如此，接口作为面向对象领域的重要实现，仍然有举足轻重的地位，本系列的第一个话题打算从接口开始。\n\n首先从看过无数次的Test Pyramid开始\n\n ![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33901643001337_.pic.jpg) \n\n 从下至上，测试粒度越来越粗，关联的服务越来越多，链路越来越长，定位问题耗时越来越多，发现问题修改的成本越来越高\n\n 对于国内中小企业的测试人员来说，接口测试是性价比最高的选择，单元测试虽然理论上发现问题的成本更低，但是相对地对开发人员的负担也会升高，以Java为例，常用的单元测试框架JUnit实现的测试代码与业务代码的比例接近3：1，在业务重，开发资源紧张的时候推进单元测试，显然不合适，而且想要单元测试的效果达到预期，要具备几个前提条件：\n\n**首先，目标要清晰**\n\n不少人认为单元测试无用的依据是，和后面的功能测试、接口测试重复，没有价值；这就要回到了测试金字塔了，尽管接口的粒度相比集成测试已经细了一些，但是\n\n**其次，测试用例的设计要过关**\n\n测试人员需要写出合格的测试用例（分支覆盖度足够，可读性强）并提供给开发作为单元测试用例的依据，这样开发才能够快速写出足够覆盖度的单元测试case；\n\n**最后，想办法降低编写单元测试的成本**\n\n不影响业务进度的同时，减少开发人员的抵触心理；\n\n测试开发可以调研一些效率更高的单元测试框架，或者开发一些效率工具供开发使用，降低编写成本；同时搭建和维护代码覆盖率的环境供开发使用，这也是测试左移的一部分\n\n**当然这个还是要看实际情况，如果开发已经在持续加班做业务了，想推单元测试就变得很困难**\n\n 尽管敏捷测试、精准测试逐渐兴起，上面的经典模型仍然能够给大多数测试行为提供参考。常见流程下的测试活动大体可以分为以下几种：\n\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33921643003968_.pic.jpg)\n\n 接口测试涵盖服务测试中的单接口测试和端到端中的接口流程测试，功能、性能、安全测试三者都不同程度穿插着对接口的测试。\n\n### 接口测试怎么做\n\n从用例设计、数据管理、框架三个方面来看看接口测试是怎么搞的\n\n#### 1、用例设计\n\n#### 2、数据管理\n\n#### 3、框架","source":"_posts/接口测试（一）聊聊接口测试.md","raw":"title: 接口测试（一）聊聊接口测试\ndate: 2022-01-20 18:49:36\ntags:\n- 接口测试\ncategories:\n- 测试开发\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/API接口.jpg\n---\n\n    接口测试是个讨论度和普及度很高的话题了，只要身处这个行业，无论了解到什么程度，都能聊几句接口测试。不过即便如此，接口作为面向对象领域的重要实现，仍然有举足轻重的地位，本系列的第一个话题打算从接口开始。\n\n首先从看过无数次的Test Pyramid开始\n\n ![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33901643001337_.pic.jpg) \n\n 从下至上，测试粒度越来越粗，关联的服务越来越多，链路越来越长，定位问题耗时越来越多，发现问题修改的成本越来越高\n\n 对于国内中小企业的测试人员来说，接口测试是性价比最高的选择，单元测试虽然理论上发现问题的成本更低，但是相对地对开发人员的负担也会升高，以Java为例，常用的单元测试框架JUnit实现的测试代码与业务代码的比例接近3：1，在业务重，开发资源紧张的时候推进单元测试，显然不合适，而且想要单元测试的效果达到预期，要具备几个前提条件：\n\n**首先，目标要清晰**\n\n不少人认为单元测试无用的依据是，和后面的功能测试、接口测试重复，没有价值；这就要回到了测试金字塔了，尽管接口的粒度相比集成测试已经细了一些，但是\n\n**其次，测试用例的设计要过关**\n\n测试人员需要写出合格的测试用例（分支覆盖度足够，可读性强）并提供给开发作为单元测试用例的依据，这样开发才能够快速写出足够覆盖度的单元测试case；\n\n**最后，想办法降低编写单元测试的成本**\n\n不影响业务进度的同时，减少开发人员的抵触心理；\n\n测试开发可以调研一些效率更高的单元测试框架，或者开发一些效率工具供开发使用，降低编写成本；同时搭建和维护代码覆盖率的环境供开发使用，这也是测试左移的一部分\n\n**当然这个还是要看实际情况，如果开发已经在持续加班做业务了，想推单元测试就变得很困难**\n\n 尽管敏捷测试、精准测试逐渐兴起，上面的经典模型仍然能够给大多数测试行为提供参考。常见流程下的测试活动大体可以分为以下几种：\n\n![](https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33921643003968_.pic.jpg)\n\n 接口测试涵盖服务测试中的单接口测试和端到端中的接口流程测试，功能、性能、安全测试三者都不同程度穿插着对接口的测试。\n\n### 接口测试怎么做\n\n从用例设计、数据管理、框架三个方面来看看接口测试是怎么搞的\n\n#### 1、用例设计\n\n#### 2、数据管理\n\n#### 3、框架","slug":"接口测试（一）聊聊接口测试","published":1,"updated":"2022-01-25T06:20:29.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1s0001ao80qcpqjbg68","content":"<pre><code>接口测试是个讨论度和普及度很高的话题了，只要身处这个行业，无论了解到什么程度，都能聊几句接口测试。不过即便如此，接口作为面向对象领域的重要实现，仍然有举足轻重的地位，本系列的第一个话题打算从接口开始。\n</code></pre>\n<p>首先从看过无数次的Test Pyramid开始</p>\n<p> <img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33901643001337_.pic.jpg\"> </p>\n<p> 从下至上，测试粒度越来越粗，关联的服务越来越多，链路越来越长，定位问题耗时越来越多，发现问题修改的成本越来越高</p>\n<p> 对于国内中小企业的测试人员来说，接口测试是性价比最高的选择，单元测试虽然理论上发现问题的成本更低，但是相对地对开发人员的负担也会升高，以Java为例，常用的单元测试框架JUnit实现的测试代码与业务代码的比例接近3：1，在业务重，开发资源紧张的时候推进单元测试，显然不合适，而且想要单元测试的效果达到预期，要具备几个前提条件：</p>\n<p><strong>首先，目标要清晰</strong></p>\n<p>不少人认为单元测试无用的依据是，和后面的功能测试、接口测试重复，没有价值；这就要回到了测试金字塔了，尽管接口的粒度相比集成测试已经细了一些，但是</p>\n<p><strong>其次，测试用例的设计要过关</strong></p>\n<p>测试人员需要写出合格的测试用例（分支覆盖度足够，可读性强）并提供给开发作为单元测试用例的依据，这样开发才能够快速写出足够覆盖度的单元测试case；</p>\n<p><strong>最后，想办法降低编写单元测试的成本</strong></p>\n<p>不影响业务进度的同时，减少开发人员的抵触心理；</p>\n<p>测试开发可以调研一些效率更高的单元测试框架，或者开发一些效率工具供开发使用，降低编写成本；同时搭建和维护代码覆盖率的环境供开发使用，这也是测试左移的一部分</p>\n<p><strong>当然这个还是要看实际情况，如果开发已经在持续加班做业务了，想推单元测试就变得很困难</strong></p>\n<p> 尽管敏捷测试、精准测试逐渐兴起，上面的经典模型仍然能够给大多数测试行为提供参考。常见流程下的测试活动大体可以分为以下几种：</p>\n<p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33921643003968_.pic.jpg\"></p>\n<p> 接口测试涵盖服务测试中的单接口测试和端到端中的接口流程测试，功能、性能、安全测试三者都不同程度穿插着对接口的测试。</p>\n<h3 id=\"接口测试怎么做\"><a href=\"#接口测试怎么做\" class=\"headerlink\" title=\"接口测试怎么做\"></a>接口测试怎么做</h3><p>从用例设计、数据管理、框架三个方面来看看接口测试是怎么搞的</p>\n<h4 id=\"1、用例设计\"><a href=\"#1、用例设计\" class=\"headerlink\" title=\"1、用例设计\"></a>1、用例设计</h4><h4 id=\"2、数据管理\"><a href=\"#2、数据管理\" class=\"headerlink\" title=\"2、数据管理\"></a>2、数据管理</h4><h4 id=\"3、框架\"><a href=\"#3、框架\" class=\"headerlink\" title=\"3、框架\"></a>3、框架</h4>","site":{"data":{}},"excerpt":"","more":"<pre><code>接口测试是个讨论度和普及度很高的话题了，只要身处这个行业，无论了解到什么程度，都能聊几句接口测试。不过即便如此，接口作为面向对象领域的重要实现，仍然有举足轻重的地位，本系列的第一个话题打算从接口开始。\n</code></pre>\n<p>首先从看过无数次的Test Pyramid开始</p>\n<p> <img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33901643001337_.pic.jpg\"> </p>\n<p> 从下至上，测试粒度越来越粗，关联的服务越来越多，链路越来越长，定位问题耗时越来越多，发现问题修改的成本越来越高</p>\n<p> 对于国内中小企业的测试人员来说，接口测试是性价比最高的选择，单元测试虽然理论上发现问题的成本更低，但是相对地对开发人员的负担也会升高，以Java为例，常用的单元测试框架JUnit实现的测试代码与业务代码的比例接近3：1，在业务重，开发资源紧张的时候推进单元测试，显然不合适，而且想要单元测试的效果达到预期，要具备几个前提条件：</p>\n<p><strong>首先，目标要清晰</strong></p>\n<p>不少人认为单元测试无用的依据是，和后面的功能测试、接口测试重复，没有价值；这就要回到了测试金字塔了，尽管接口的粒度相比集成测试已经细了一些，但是</p>\n<p><strong>其次，测试用例的设计要过关</strong></p>\n<p>测试人员需要写出合格的测试用例（分支覆盖度足够，可读性强）并提供给开发作为单元测试用例的依据，这样开发才能够快速写出足够覆盖度的单元测试case；</p>\n<p><strong>最后，想办法降低编写单元测试的成本</strong></p>\n<p>不影响业务进度的同时，减少开发人员的抵触心理；</p>\n<p>测试开发可以调研一些效率更高的单元测试框架，或者开发一些效率工具供开发使用，降低编写成本；同时搭建和维护代码覆盖率的环境供开发使用，这也是测试左移的一部分</p>\n<p><strong>当然这个还是要看实际情况，如果开发已经在持续加班做业务了，想推单元测试就变得很困难</strong></p>\n<p> 尽管敏捷测试、精准测试逐渐兴起，上面的经典模型仍然能够给大多数测试行为提供参考。常见流程下的测试活动大体可以分为以下几种：</p>\n<p><img src=\"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/33921643003968_.pic.jpg\"></p>\n<p> 接口测试涵盖服务测试中的单接口测试和端到端中的接口流程测试，功能、性能、安全测试三者都不同程度穿插着对接口的测试。</p>\n<h3 id=\"接口测试怎么做\"><a href=\"#接口测试怎么做\" class=\"headerlink\" title=\"接口测试怎么做\"></a>接口测试怎么做</h3><p>从用例设计、数据管理、框架三个方面来看看接口测试是怎么搞的</p>\n<h4 id=\"1、用例设计\"><a href=\"#1、用例设计\" class=\"headerlink\" title=\"1、用例设计\"></a>1、用例设计</h4><h4 id=\"2、数据管理\"><a href=\"#2、数据管理\" class=\"headerlink\" title=\"2、数据管理\"></a>2、数据管理</h4><h4 id=\"3、框架\"><a href=\"#3、框架\" class=\"headerlink\" title=\"3、框架\"></a>3、框架</h4>"},{"title":"日常Linux操作总结","date":"2022-01-27T07:58:57.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/Linux.jpg","_content":"\n# 常用场景\n\n包括：\n\n- 1、查看Linux的版本、cpu、内存、磁盘等信息\n- 2、查看磁盘占用，查找文件和目录，处理大文件\n- 3、处理日志\n- 4、端口、进程相关操作\n- 5、crontab定时任务\n- 6、自定义快捷命令\n- 7、常见环境配置：防火墙、免登陆、yum、时间、JDK等\n  \n\n## 1.查看基础信息\n```shell\n# 查看CentOS系统版本号\ncat /etc/centos-release\n# 查看系统内核\nuname -r\n# 查看系统位数\ngetconf LONG_BIT\n```\n```shell\n# 查看cpu和内存，磁盘等信息\n\n```\n## 2.处理磁盘、大文件\n### 2-1.使用的命令\n#### find命令查找目录和文件\n```shell\n# 常用参数：\n-type: 文件类型，d 目录 f 文件\n-name: 名称 通配符：\"*.*\" 文件名称:文件后缀\n-iname: 名称不区分大小写\n-size: 文件/目录大小\n# 执行参数：\n-exec： find的结果作为exec的入参\n-ok：功能同-exec，区别是在请求之前询问是否执行，输入y执行\n# 查询所有目录下所有大于50M的文件\nfind / -size +50M -exec ls -lh {} \\;\n# 查找所有目录下jmx类型的文件\nfind / -type f -name \"*.jmx\" -exec ls -lh {} \\;\n# 查找指定目录下文件名为test的文件，不区分大小写\nfind /{dir} -type f -iname \"test\" -exec ls -lh {} \\;\n# 查找指定目录下不为test的文件\nfind /{dir} -type f !-name \"test\" -exec ls -lh {} \\;\n```\n##### 与正则配合使用\n```\n#\n\n```\n\n#### du命令查看目录和文件的磁盘使用空间\n```shell\n# 常用参数：\n-k: 以KB单位显示\n-m: 以MB单位显示\n-h: 以K M G为单位显示，提高可读性\n--max-depth: 显示层级\n# 查看/opt目录下的目录和文件大小并按文件从大到小排序\ndu -h --max-depth=1 /opt/ | sort\n```\n#### df命令查看磁盘中的可用空间\n```shell\n# 常用参数\n-a: 查看所有文件系统的磁盘占用，单位默认KB\n-h: 以K M G为单位显示，注意：这里的1k=1000byte,1m=1000k\n```\n#### sort排序\n```shell\n#常用参数：\n-u: 排序后去除重复行\n-n: 按照数值排序\n-r: 按降序排序，sort默认升序排序\n-t: 指定分隔符\n-k: 指定列数，与-t配合使用\n#当前目录下的文件按照文件大小排序\nls -lh | sort -n -k 5\n```\n#### uniq去重\n```shell\n#常用参数\n-c: 去重并在第一列显示每一行重复的次数\n```\n\n### 2-2.场景\n#### 1、当前磁盘满了，需要定位大文件并删除\n```shell\n#1、查看自盘占用\ndf -h\n#2、进入磁盘占用大的目录找到大文件\ndu -h --max-depth=1 /opt/ | sort\n```\n#### 2、找到/test目录下所有大于1G的.log文件删除\n```shell\nfind /test -name \"*.log\" -size +1024M -exec rm -rf {} \\;\n```\n\n## 3.处理日志\n\n包括：\n\n- 1、日志内容筛选与编辑;正则匹配，命令行高亮显示\n- 2、日志文件切割与批处理\n  \n\n**使用到的命令：split cat grep awk sed**\n\n### 3-1.使用的命令\n#### split命令切割文件\n```shell\n#用法\nsplit [-b ][-C ][-][-l ][要切割的文件][输出文件名前缀][-a ]\n#常用参数：\n-b: 指定拆分文件大小，也可以指定 K、M、G、T 等单位\n-l: 指定每多少行要拆分成一个文件\n-d: 使用数字作为拆分文件的后缀\n-a: 指定后缀长度\n# 将test.log拆分成每个文件大小不超过1M，且命名采用test_01,test_02...的文件\nsplit -b 1M -d test.log test_\n# 将test.log拆分成每个文件不超过100行，且命名采用test_01,test_02...的文件\nsplit -l 100 -d test.log test_\n```\n#### tail命令分析日志文件\n```shell\n#常用参数：\n-f: 当文件增长时，持续输出\n-n: 输出文件最后n行，而不是默认的最后10行\n--pid: 与-f结合使用，在PID终止后结束 --\n-q: 不输出文件名\n-s: 与-f结合使用，-s=n：每次输出间隔n秒\n-v: 输出文件名\n# 输出test.log\ntail -f test.log\n# 输出test.log和error.log\ntail -f test.log error.log\n# 输出test.log中最后200行的内容\ntail -n 200 test.log\n```\n#### 与head、grep、正则的配合使用\n\n```shell\n#head常用参数\n-n: 显示起始的n行，非默认的10行\n-v: 显示文件名\n-q: 不显示文件名\n#grep常用参数\n-v: 不包含匹配的所有行\n-c: 计算符合匹配的列数\n-w: 只显示完整匹配的结果，不包括部分匹配，比如匹配要求是apple，则只有准确地为apple的内容会返回\n-e: 后面接正则条件，一个参数只能加一个条件\n-E: 后面接正则条件，一个参数可以加多个条件\n-i: 忽略大小写\n-o: 只显示匹配pattern的部分\n-n: 输出内容时添加结果所在的行号\n-r: 递归匹配\n-color: -color=auto / always / never;\n#a,b的意义分别表示加颜色的方式和颜色值\nexport GREP_COLOR='a;b'\n#a取值范围:【0,1,4,5,7,8】 0关闭所有属性; 1设置高亮度; 4下划线; 5闪烁; 7反显; 8消隐; \n#b取值范围:【30-37或40-47】30 black 31 red 32 green 33 yellow 34 blue 35 purple 36 cyan 37 white 30—37 设置前景色 40—47 设置背景色\n-A: 打印出紧随匹配的行之后的下文 NUM 行\n-B: 打印出匹配的行之前的上文 NUM 行\n-C: 打印出匹配的行的上下文前后各 NUM 行\n\n#pattern的常用参数\n\n# 输出test.log的第100行到第200行\ncat test.log | head -n 200 | tail -n 100\n# 持续输出test.log中包含”Listener“的行\ntail -f jmeter.log | grep \"Listener\"\n```\n\n#### awk处理列数据\n```shell\n#用法 pattern：匹配内容；action：找到匹配后对每一行执行的操作\nawk '{pattern + action}' {filenames}\n#内置变量：\n$0: 整行\n$1~n: 第n列\nNF: 字段数量\nNR: 行数\nFS: -F 分隔字段符号，可以传一个或多个\nBEGIN和END模块\n#输出test.log的第100行到第200行使用awk实现\nawk '{if(NR>100 && NR<200)print $0 }' test.log\n#输出test.log中带有https的行中第二列是200的内容\ncat test.log | grep -w 'https' | awk '{if ($2 == 200)print}'\n#统计test.log中带有https的行中第二列是200的数量\n## 注意在加入BEGIN和END语句之后，不要忘记分号\ncat test.log | grep -w 'https' | awk '{count++;if ($2 == 200);} END{print \"total 200 is\",count}'\n# \n\n```\n#### sed处理行数据、替换数据\n```shell\n#常用参数：\n\n```\n\n### 3-2.场景\n\n#### 1、匹配输出test.log中带有https的行并高亮显示\n```shell\n# 这里grep使用-w参数为了过滤带有http的行，只匹配完全是https的行\ntail -f test.log | grep -w \"https\" --color=auto\n```\n#### 2、统计Nginx日志中访问量前10的IP\n```shell\n# 注意参数-n，不使用-n参数会得到错误的结果\n\nawk '{a[$1]++} END{for(i in a)print i,a[i]}' access.log | sort -n -r -k 2 | head -10 \n```\n#### 3、统计Nginx日志中访问超过10次的IP\n```shell\nawk '{a[$1]++} END{for(i in a){if(a[i]>10)print i,a[i]}}' access.log | sort -nr -k 2 \n```\n#### 4、统计每个IP访问结果状态码的数量\n```shell\n#方法一，使用awk统计\nawk '{a[$1\" \"$13]++}END{for(i in a)print i,a[i]}' access.log | sort -r\n#方法二，使用uniq做去重和统计\nawk '{print $1 \" \"$13}' access.log | sort -r | uniq -c\n```\n## 4.端口、进程操作\n## 5.crontab定时任务\n## 6.自定义快捷命令\n\n编写shell函数的sh文件，将路径放在当前shell的环境变量下，即可在命令行中通过命令的形式调用函数\n## 7.其他常规操作","source":"_posts/日常Linux使用总结.md","raw":"title: 日常Linux操作总结\ndate: 2022-01-27 15:58:57\ntags:\n- Linux\n- Shell\ncategories:\n- Linux\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/Linux.jpg\n---\n\n# 常用场景\n\n包括：\n\n- 1、查看Linux的版本、cpu、内存、磁盘等信息\n- 2、查看磁盘占用，查找文件和目录，处理大文件\n- 3、处理日志\n- 4、端口、进程相关操作\n- 5、crontab定时任务\n- 6、自定义快捷命令\n- 7、常见环境配置：防火墙、免登陆、yum、时间、JDK等\n  \n\n## 1.查看基础信息\n```shell\n# 查看CentOS系统版本号\ncat /etc/centos-release\n# 查看系统内核\nuname -r\n# 查看系统位数\ngetconf LONG_BIT\n```\n```shell\n# 查看cpu和内存，磁盘等信息\n\n```\n## 2.处理磁盘、大文件\n### 2-1.使用的命令\n#### find命令查找目录和文件\n```shell\n# 常用参数：\n-type: 文件类型，d 目录 f 文件\n-name: 名称 通配符：\"*.*\" 文件名称:文件后缀\n-iname: 名称不区分大小写\n-size: 文件/目录大小\n# 执行参数：\n-exec： find的结果作为exec的入参\n-ok：功能同-exec，区别是在请求之前询问是否执行，输入y执行\n# 查询所有目录下所有大于50M的文件\nfind / -size +50M -exec ls -lh {} \\;\n# 查找所有目录下jmx类型的文件\nfind / -type f -name \"*.jmx\" -exec ls -lh {} \\;\n# 查找指定目录下文件名为test的文件，不区分大小写\nfind /{dir} -type f -iname \"test\" -exec ls -lh {} \\;\n# 查找指定目录下不为test的文件\nfind /{dir} -type f !-name \"test\" -exec ls -lh {} \\;\n```\n##### 与正则配合使用\n```\n#\n\n```\n\n#### du命令查看目录和文件的磁盘使用空间\n```shell\n# 常用参数：\n-k: 以KB单位显示\n-m: 以MB单位显示\n-h: 以K M G为单位显示，提高可读性\n--max-depth: 显示层级\n# 查看/opt目录下的目录和文件大小并按文件从大到小排序\ndu -h --max-depth=1 /opt/ | sort\n```\n#### df命令查看磁盘中的可用空间\n```shell\n# 常用参数\n-a: 查看所有文件系统的磁盘占用，单位默认KB\n-h: 以K M G为单位显示，注意：这里的1k=1000byte,1m=1000k\n```\n#### sort排序\n```shell\n#常用参数：\n-u: 排序后去除重复行\n-n: 按照数值排序\n-r: 按降序排序，sort默认升序排序\n-t: 指定分隔符\n-k: 指定列数，与-t配合使用\n#当前目录下的文件按照文件大小排序\nls -lh | sort -n -k 5\n```\n#### uniq去重\n```shell\n#常用参数\n-c: 去重并在第一列显示每一行重复的次数\n```\n\n### 2-2.场景\n#### 1、当前磁盘满了，需要定位大文件并删除\n```shell\n#1、查看自盘占用\ndf -h\n#2、进入磁盘占用大的目录找到大文件\ndu -h --max-depth=1 /opt/ | sort\n```\n#### 2、找到/test目录下所有大于1G的.log文件删除\n```shell\nfind /test -name \"*.log\" -size +1024M -exec rm -rf {} \\;\n```\n\n## 3.处理日志\n\n包括：\n\n- 1、日志内容筛选与编辑;正则匹配，命令行高亮显示\n- 2、日志文件切割与批处理\n  \n\n**使用到的命令：split cat grep awk sed**\n\n### 3-1.使用的命令\n#### split命令切割文件\n```shell\n#用法\nsplit [-b ][-C ][-][-l ][要切割的文件][输出文件名前缀][-a ]\n#常用参数：\n-b: 指定拆分文件大小，也可以指定 K、M、G、T 等单位\n-l: 指定每多少行要拆分成一个文件\n-d: 使用数字作为拆分文件的后缀\n-a: 指定后缀长度\n# 将test.log拆分成每个文件大小不超过1M，且命名采用test_01,test_02...的文件\nsplit -b 1M -d test.log test_\n# 将test.log拆分成每个文件不超过100行，且命名采用test_01,test_02...的文件\nsplit -l 100 -d test.log test_\n```\n#### tail命令分析日志文件\n```shell\n#常用参数：\n-f: 当文件增长时，持续输出\n-n: 输出文件最后n行，而不是默认的最后10行\n--pid: 与-f结合使用，在PID终止后结束 --\n-q: 不输出文件名\n-s: 与-f结合使用，-s=n：每次输出间隔n秒\n-v: 输出文件名\n# 输出test.log\ntail -f test.log\n# 输出test.log和error.log\ntail -f test.log error.log\n# 输出test.log中最后200行的内容\ntail -n 200 test.log\n```\n#### 与head、grep、正则的配合使用\n\n```shell\n#head常用参数\n-n: 显示起始的n行，非默认的10行\n-v: 显示文件名\n-q: 不显示文件名\n#grep常用参数\n-v: 不包含匹配的所有行\n-c: 计算符合匹配的列数\n-w: 只显示完整匹配的结果，不包括部分匹配，比如匹配要求是apple，则只有准确地为apple的内容会返回\n-e: 后面接正则条件，一个参数只能加一个条件\n-E: 后面接正则条件，一个参数可以加多个条件\n-i: 忽略大小写\n-o: 只显示匹配pattern的部分\n-n: 输出内容时添加结果所在的行号\n-r: 递归匹配\n-color: -color=auto / always / never;\n#a,b的意义分别表示加颜色的方式和颜色值\nexport GREP_COLOR='a;b'\n#a取值范围:【0,1,4,5,7,8】 0关闭所有属性; 1设置高亮度; 4下划线; 5闪烁; 7反显; 8消隐; \n#b取值范围:【30-37或40-47】30 black 31 red 32 green 33 yellow 34 blue 35 purple 36 cyan 37 white 30—37 设置前景色 40—47 设置背景色\n-A: 打印出紧随匹配的行之后的下文 NUM 行\n-B: 打印出匹配的行之前的上文 NUM 行\n-C: 打印出匹配的行的上下文前后各 NUM 行\n\n#pattern的常用参数\n\n# 输出test.log的第100行到第200行\ncat test.log | head -n 200 | tail -n 100\n# 持续输出test.log中包含”Listener“的行\ntail -f jmeter.log | grep \"Listener\"\n```\n\n#### awk处理列数据\n```shell\n#用法 pattern：匹配内容；action：找到匹配后对每一行执行的操作\nawk '{pattern + action}' {filenames}\n#内置变量：\n$0: 整行\n$1~n: 第n列\nNF: 字段数量\nNR: 行数\nFS: -F 分隔字段符号，可以传一个或多个\nBEGIN和END模块\n#输出test.log的第100行到第200行使用awk实现\nawk '{if(NR>100 && NR<200)print $0 }' test.log\n#输出test.log中带有https的行中第二列是200的内容\ncat test.log | grep -w 'https' | awk '{if ($2 == 200)print}'\n#统计test.log中带有https的行中第二列是200的数量\n## 注意在加入BEGIN和END语句之后，不要忘记分号\ncat test.log | grep -w 'https' | awk '{count++;if ($2 == 200);} END{print \"total 200 is\",count}'\n# \n\n```\n#### sed处理行数据、替换数据\n```shell\n#常用参数：\n\n```\n\n### 3-2.场景\n\n#### 1、匹配输出test.log中带有https的行并高亮显示\n```shell\n# 这里grep使用-w参数为了过滤带有http的行，只匹配完全是https的行\ntail -f test.log | grep -w \"https\" --color=auto\n```\n#### 2、统计Nginx日志中访问量前10的IP\n```shell\n# 注意参数-n，不使用-n参数会得到错误的结果\n\nawk '{a[$1]++} END{for(i in a)print i,a[i]}' access.log | sort -n -r -k 2 | head -10 \n```\n#### 3、统计Nginx日志中访问超过10次的IP\n```shell\nawk '{a[$1]++} END{for(i in a){if(a[i]>10)print i,a[i]}}' access.log | sort -nr -k 2 \n```\n#### 4、统计每个IP访问结果状态码的数量\n```shell\n#方法一，使用awk统计\nawk '{a[$1\" \"$13]++}END{for(i in a)print i,a[i]}' access.log | sort -r\n#方法二，使用uniq做去重和统计\nawk '{print $1 \" \"$13}' access.log | sort -r | uniq -c\n```\n## 4.端口、进程操作\n## 5.crontab定时任务\n## 6.自定义快捷命令\n\n编写shell函数的sh文件，将路径放在当前shell的环境变量下，即可在命令行中通过命令的形式调用函数\n## 7.其他常规操作","slug":"日常Linux使用总结","published":1,"updated":"2022-01-27T07:59:07.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1s2001co80q4vpv4zbc","content":"<h1 id=\"常用场景\"><a href=\"#常用场景\" class=\"headerlink\" title=\"常用场景\"></a>常用场景</h1><p>包括：</p>\n<ul>\n<li>1、查看Linux的版本、cpu、内存、磁盘等信息</li>\n<li>2、查看磁盘占用，查找文件和目录，处理大文件</li>\n<li>3、处理日志</li>\n<li>4、端口、进程相关操作</li>\n<li>5、crontab定时任务</li>\n<li>6、自定义快捷命令</li>\n<li>7、常见环境配置：防火墙、免登陆、yum、时间、JDK等</li>\n</ul>\n<h2 id=\"1-查看基础信息\"><a href=\"#1-查看基础信息\" class=\"headerlink\" title=\"1.查看基础信息\"></a>1.查看基础信息</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 查看CentOS系统版本号\ncat &#x2F;etc&#x2F;centos-release\n# 查看系统内核\nuname -r\n# 查看系统位数\ngetconf LONG_BIT</code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 查看cpu和内存，磁盘等信息\n</code></pre>\n<h2 id=\"2-处理磁盘、大文件\"><a href=\"#2-处理磁盘、大文件\" class=\"headerlink\" title=\"2.处理磁盘、大文件\"></a>2.处理磁盘、大文件</h2><h3 id=\"2-1-使用的命令\"><a href=\"#2-1-使用的命令\" class=\"headerlink\" title=\"2-1.使用的命令\"></a>2-1.使用的命令</h3><h4 id=\"find命令查找目录和文件\"><a href=\"#find命令查找目录和文件\" class=\"headerlink\" title=\"find命令查找目录和文件\"></a>find命令查找目录和文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数：\n-type: 文件类型，d 目录 f 文件\n-name: 名称 通配符：&quot;*.*&quot; 文件名称:文件后缀\n-iname: 名称不区分大小写\n-size: 文件&#x2F;目录大小\n# 执行参数：\n-exec： find的结果作为exec的入参\n-ok：功能同-exec，区别是在请求之前询问是否执行，输入y执行\n# 查询所有目录下所有大于50M的文件\nfind &#x2F; -size +50M -exec ls -lh &#123;&#125; \\;\n# 查找所有目录下jmx类型的文件\nfind &#x2F; -type f -name &quot;*.jmx&quot; -exec ls -lh &#123;&#125; \\;\n# 查找指定目录下文件名为test的文件，不区分大小写\nfind &#x2F;&#123;dir&#125; -type f -iname &quot;test&quot; -exec ls -lh &#123;&#125; \\;\n# 查找指定目录下不为test的文件\nfind &#x2F;&#123;dir&#125; -type f !-name &quot;test&quot; -exec ls -lh &#123;&#125; \\;</code></pre>\n<h5 id=\"与正则配合使用\"><a href=\"#与正则配合使用\" class=\"headerlink\" title=\"与正则配合使用\"></a>与正则配合使用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">#\n</code></pre>\n\n<h4 id=\"du命令查看目录和文件的磁盘使用空间\"><a href=\"#du命令查看目录和文件的磁盘使用空间\" class=\"headerlink\" title=\"du命令查看目录和文件的磁盘使用空间\"></a>du命令查看目录和文件的磁盘使用空间</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数：\n-k: 以KB单位显示\n-m: 以MB单位显示\n-h: 以K M G为单位显示，提高可读性\n--max-depth: 显示层级\n# 查看&#x2F;opt目录下的目录和文件大小并按文件从大到小排序\ndu -h --max-depth&#x3D;1 &#x2F;opt&#x2F; | sort</code></pre>\n<h4 id=\"df命令查看磁盘中的可用空间\"><a href=\"#df命令查看磁盘中的可用空间\" class=\"headerlink\" title=\"df命令查看磁盘中的可用空间\"></a>df命令查看磁盘中的可用空间</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数\n-a: 查看所有文件系统的磁盘占用，单位默认KB\n-h: 以K M G为单位显示，注意：这里的1k&#x3D;1000byte,1m&#x3D;1000k</code></pre>\n<h4 id=\"sort排序\"><a href=\"#sort排序\" class=\"headerlink\" title=\"sort排序\"></a>sort排序</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n-u: 排序后去除重复行\n-n: 按照数值排序\n-r: 按降序排序，sort默认升序排序\n-t: 指定分隔符\n-k: 指定列数，与-t配合使用\n#当前目录下的文件按照文件大小排序\nls -lh | sort -n -k 5</code></pre>\n<h4 id=\"uniq去重\"><a href=\"#uniq去重\" class=\"headerlink\" title=\"uniq去重\"></a>uniq去重</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数\n-c: 去重并在第一列显示每一行重复的次数</code></pre>\n\n<h3 id=\"2-2-场景\"><a href=\"#2-2-场景\" class=\"headerlink\" title=\"2-2.场景\"></a>2-2.场景</h3><h4 id=\"1、当前磁盘满了，需要定位大文件并删除\"><a href=\"#1、当前磁盘满了，需要定位大文件并删除\" class=\"headerlink\" title=\"1、当前磁盘满了，需要定位大文件并删除\"></a>1、当前磁盘满了，需要定位大文件并删除</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#1、查看自盘占用\ndf -h\n#2、进入磁盘占用大的目录找到大文件\ndu -h --max-depth&#x3D;1 &#x2F;opt&#x2F; | sort</code></pre>\n<h4 id=\"2、找到-test目录下所有大于1G的-log文件删除\"><a href=\"#2、找到-test目录下所有大于1G的-log文件删除\" class=\"headerlink\" title=\"2、找到/test目录下所有大于1G的.log文件删除\"></a>2、找到/test目录下所有大于1G的.log文件删除</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">find &#x2F;test -name &quot;*.log&quot; -size +1024M -exec rm -rf &#123;&#125; \\;</code></pre>\n\n<h2 id=\"3-处理日志\"><a href=\"#3-处理日志\" class=\"headerlink\" title=\"3.处理日志\"></a>3.处理日志</h2><p>包括：</p>\n<ul>\n<li>1、日志内容筛选与编辑;正则匹配，命令行高亮显示</li>\n<li>2、日志文件切割与批处理</li>\n</ul>\n<p><strong>使用到的命令：split cat grep awk sed</strong></p>\n<h3 id=\"3-1-使用的命令\"><a href=\"#3-1-使用的命令\" class=\"headerlink\" title=\"3-1.使用的命令\"></a>3-1.使用的命令</h3><h4 id=\"split命令切割文件\"><a href=\"#split命令切割文件\" class=\"headerlink\" title=\"split命令切割文件\"></a>split命令切割文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#用法\nsplit [-b ][-C ][-][-l ][要切割的文件][输出文件名前缀][-a ]\n#常用参数：\n-b: 指定拆分文件大小，也可以指定 K、M、G、T 等单位\n-l: 指定每多少行要拆分成一个文件\n-d: 使用数字作为拆分文件的后缀\n-a: 指定后缀长度\n# 将test.log拆分成每个文件大小不超过1M，且命名采用test_01,test_02...的文件\nsplit -b 1M -d test.log test_\n# 将test.log拆分成每个文件不超过100行，且命名采用test_01,test_02...的文件\nsplit -l 100 -d test.log test_</code></pre>\n<h4 id=\"tail命令分析日志文件\"><a href=\"#tail命令分析日志文件\" class=\"headerlink\" title=\"tail命令分析日志文件\"></a>tail命令分析日志文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n-f: 当文件增长时，持续输出\n-n: 输出文件最后n行，而不是默认的最后10行\n--pid: 与-f结合使用，在PID终止后结束 --\n-q: 不输出文件名\n-s: 与-f结合使用，-s&#x3D;n：每次输出间隔n秒\n-v: 输出文件名\n# 输出test.log\ntail -f test.log\n# 输出test.log和error.log\ntail -f test.log error.log\n# 输出test.log中最后200行的内容\ntail -n 200 test.log</code></pre>\n<h4 id=\"与head、grep、正则的配合使用\"><a href=\"#与head、grep、正则的配合使用\" class=\"headerlink\" title=\"与head、grep、正则的配合使用\"></a>与head、grep、正则的配合使用</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#head常用参数\n-n: 显示起始的n行，非默认的10行\n-v: 显示文件名\n-q: 不显示文件名\n#grep常用参数\n-v: 不包含匹配的所有行\n-c: 计算符合匹配的列数\n-w: 只显示完整匹配的结果，不包括部分匹配，比如匹配要求是apple，则只有准确地为apple的内容会返回\n-e: 后面接正则条件，一个参数只能加一个条件\n-E: 后面接正则条件，一个参数可以加多个条件\n-i: 忽略大小写\n-o: 只显示匹配pattern的部分\n-n: 输出内容时添加结果所在的行号\n-r: 递归匹配\n-color: -color&#x3D;auto &#x2F; always &#x2F; never;\n#a,b的意义分别表示加颜色的方式和颜色值\nexport GREP_COLOR&#x3D;&#39;a;b&#39;\n#a取值范围:【0,1,4,5,7,8】 0关闭所有属性; 1设置高亮度; 4下划线; 5闪烁; 7反显; 8消隐; \n#b取值范围:【30-37或40-47】30 black 31 red 32 green 33 yellow 34 blue 35 purple 36 cyan 37 white 30—37 设置前景色 40—47 设置背景色\n-A: 打印出紧随匹配的行之后的下文 NUM 行\n-B: 打印出匹配的行之前的上文 NUM 行\n-C: 打印出匹配的行的上下文前后各 NUM 行\n\n#pattern的常用参数\n\n# 输出test.log的第100行到第200行\ncat test.log | head -n 200 | tail -n 100\n# 持续输出test.log中包含”Listener“的行\ntail -f jmeter.log | grep &quot;Listener&quot;</code></pre>\n\n<h4 id=\"awk处理列数据\"><a href=\"#awk处理列数据\" class=\"headerlink\" title=\"awk处理列数据\"></a>awk处理列数据</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#用法 pattern：匹配内容；action：找到匹配后对每一行执行的操作\nawk &#39;&#123;pattern + action&#125;&#39; &#123;filenames&#125;\n#内置变量：\n$0: 整行\n$1~n: 第n列\nNF: 字段数量\nNR: 行数\nFS: -F 分隔字段符号，可以传一个或多个\nBEGIN和END模块\n#输出test.log的第100行到第200行使用awk实现\nawk &#39;&#123;if(NR&gt;100 &amp;&amp; NR&lt;200)print $0 &#125;&#39; test.log\n#输出test.log中带有https的行中第二列是200的内容\ncat test.log | grep -w &#39;https&#39; | awk &#39;&#123;if ($2 &#x3D;&#x3D; 200)print&#125;&#39;\n#统计test.log中带有https的行中第二列是200的数量\n## 注意在加入BEGIN和END语句之后，不要忘记分号\ncat test.log | grep -w &#39;https&#39; | awk &#39;&#123;count++;if ($2 &#x3D;&#x3D; 200);&#125; END&#123;print &quot;total 200 is&quot;,count&#125;&#39;\n# \n</code></pre>\n<h4 id=\"sed处理行数据、替换数据\"><a href=\"#sed处理行数据、替换数据\" class=\"headerlink\" title=\"sed处理行数据、替换数据\"></a>sed处理行数据、替换数据</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n</code></pre>\n\n<h3 id=\"3-2-场景\"><a href=\"#3-2-场景\" class=\"headerlink\" title=\"3-2.场景\"></a>3-2.场景</h3><h4 id=\"1、匹配输出test-log中带有https的行并高亮显示\"><a href=\"#1、匹配输出test-log中带有https的行并高亮显示\" class=\"headerlink\" title=\"1、匹配输出test.log中带有https的行并高亮显示\"></a>1、匹配输出test.log中带有https的行并高亮显示</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 这里grep使用-w参数为了过滤带有http的行，只匹配完全是https的行\ntail -f test.log | grep -w &quot;https&quot; --color&#x3D;auto</code></pre>\n<h4 id=\"2、统计Nginx日志中访问量前10的IP\"><a href=\"#2、统计Nginx日志中访问量前10的IP\" class=\"headerlink\" title=\"2、统计Nginx日志中访问量前10的IP\"></a>2、统计Nginx日志中访问量前10的IP</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 注意参数-n，不使用-n参数会得到错误的结果\n\nawk &#39;&#123;a[$1]++&#125; END&#123;for(i in a)print i,a[i]&#125;&#39; access.log | sort -n -r -k 2 | head -10 </code></pre>\n<h4 id=\"3、统计Nginx日志中访问超过10次的IP\"><a href=\"#3、统计Nginx日志中访问超过10次的IP\" class=\"headerlink\" title=\"3、统计Nginx日志中访问超过10次的IP\"></a>3、统计Nginx日志中访问超过10次的IP</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">awk &#39;&#123;a[$1]++&#125; END&#123;for(i in a)&#123;if(a[i]&gt;10)print i,a[i]&#125;&#125;&#39; access.log | sort -nr -k 2 </code></pre>\n<h4 id=\"4、统计每个IP访问结果状态码的数量\"><a href=\"#4、统计每个IP访问结果状态码的数量\" class=\"headerlink\" title=\"4、统计每个IP访问结果状态码的数量\"></a>4、统计每个IP访问结果状态码的数量</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#方法一，使用awk统计\nawk &#39;&#123;a[$1&quot; &quot;$13]++&#125;END&#123;for(i in a)print i,a[i]&#125;&#39; access.log | sort -r\n#方法二，使用uniq做去重和统计\nawk &#39;&#123;print $1 &quot; &quot;$13&#125;&#39; access.log | sort -r | uniq -c</code></pre>\n<h2 id=\"4-端口、进程操作\"><a href=\"#4-端口、进程操作\" class=\"headerlink\" title=\"4.端口、进程操作\"></a>4.端口、进程操作</h2><h2 id=\"5-crontab定时任务\"><a href=\"#5-crontab定时任务\" class=\"headerlink\" title=\"5.crontab定时任务\"></a>5.crontab定时任务</h2><h2 id=\"6-自定义快捷命令\"><a href=\"#6-自定义快捷命令\" class=\"headerlink\" title=\"6.自定义快捷命令\"></a>6.自定义快捷命令</h2><p>编写shell函数的sh文件，将路径放在当前shell的环境变量下，即可在命令行中通过命令的形式调用函数</p>\n<h2 id=\"7-其他常规操作\"><a href=\"#7-其他常规操作\" class=\"headerlink\" title=\"7.其他常规操作\"></a>7.其他常规操作</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用场景\"><a href=\"#常用场景\" class=\"headerlink\" title=\"常用场景\"></a>常用场景</h1><p>包括：</p>\n<ul>\n<li>1、查看Linux的版本、cpu、内存、磁盘等信息</li>\n<li>2、查看磁盘占用，查找文件和目录，处理大文件</li>\n<li>3、处理日志</li>\n<li>4、端口、进程相关操作</li>\n<li>5、crontab定时任务</li>\n<li>6、自定义快捷命令</li>\n<li>7、常见环境配置：防火墙、免登陆、yum、时间、JDK等</li>\n</ul>\n<h2 id=\"1-查看基础信息\"><a href=\"#1-查看基础信息\" class=\"headerlink\" title=\"1.查看基础信息\"></a>1.查看基础信息</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 查看CentOS系统版本号\ncat &#x2F;etc&#x2F;centos-release\n# 查看系统内核\nuname -r\n# 查看系统位数\ngetconf LONG_BIT</code></pre>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 查看cpu和内存，磁盘等信息\n</code></pre>\n<h2 id=\"2-处理磁盘、大文件\"><a href=\"#2-处理磁盘、大文件\" class=\"headerlink\" title=\"2.处理磁盘、大文件\"></a>2.处理磁盘、大文件</h2><h3 id=\"2-1-使用的命令\"><a href=\"#2-1-使用的命令\" class=\"headerlink\" title=\"2-1.使用的命令\"></a>2-1.使用的命令</h3><h4 id=\"find命令查找目录和文件\"><a href=\"#find命令查找目录和文件\" class=\"headerlink\" title=\"find命令查找目录和文件\"></a>find命令查找目录和文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数：\n-type: 文件类型，d 目录 f 文件\n-name: 名称 通配符：&quot;*.*&quot; 文件名称:文件后缀\n-iname: 名称不区分大小写\n-size: 文件&#x2F;目录大小\n# 执行参数：\n-exec： find的结果作为exec的入参\n-ok：功能同-exec，区别是在请求之前询问是否执行，输入y执行\n# 查询所有目录下所有大于50M的文件\nfind &#x2F; -size +50M -exec ls -lh &#123;&#125; \\;\n# 查找所有目录下jmx类型的文件\nfind &#x2F; -type f -name &quot;*.jmx&quot; -exec ls -lh &#123;&#125; \\;\n# 查找指定目录下文件名为test的文件，不区分大小写\nfind &#x2F;&#123;dir&#125; -type f -iname &quot;test&quot; -exec ls -lh &#123;&#125; \\;\n# 查找指定目录下不为test的文件\nfind &#x2F;&#123;dir&#125; -type f !-name &quot;test&quot; -exec ls -lh &#123;&#125; \\;</code></pre>\n<h5 id=\"与正则配合使用\"><a href=\"#与正则配合使用\" class=\"headerlink\" title=\"与正则配合使用\"></a>与正则配合使用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">#\n</code></pre>\n\n<h4 id=\"du命令查看目录和文件的磁盘使用空间\"><a href=\"#du命令查看目录和文件的磁盘使用空间\" class=\"headerlink\" title=\"du命令查看目录和文件的磁盘使用空间\"></a>du命令查看目录和文件的磁盘使用空间</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数：\n-k: 以KB单位显示\n-m: 以MB单位显示\n-h: 以K M G为单位显示，提高可读性\n--max-depth: 显示层级\n# 查看&#x2F;opt目录下的目录和文件大小并按文件从大到小排序\ndu -h --max-depth&#x3D;1 &#x2F;opt&#x2F; | sort</code></pre>\n<h4 id=\"df命令查看磁盘中的可用空间\"><a href=\"#df命令查看磁盘中的可用空间\" class=\"headerlink\" title=\"df命令查看磁盘中的可用空间\"></a>df命令查看磁盘中的可用空间</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 常用参数\n-a: 查看所有文件系统的磁盘占用，单位默认KB\n-h: 以K M G为单位显示，注意：这里的1k&#x3D;1000byte,1m&#x3D;1000k</code></pre>\n<h4 id=\"sort排序\"><a href=\"#sort排序\" class=\"headerlink\" title=\"sort排序\"></a>sort排序</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n-u: 排序后去除重复行\n-n: 按照数值排序\n-r: 按降序排序，sort默认升序排序\n-t: 指定分隔符\n-k: 指定列数，与-t配合使用\n#当前目录下的文件按照文件大小排序\nls -lh | sort -n -k 5</code></pre>\n<h4 id=\"uniq去重\"><a href=\"#uniq去重\" class=\"headerlink\" title=\"uniq去重\"></a>uniq去重</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数\n-c: 去重并在第一列显示每一行重复的次数</code></pre>\n\n<h3 id=\"2-2-场景\"><a href=\"#2-2-场景\" class=\"headerlink\" title=\"2-2.场景\"></a>2-2.场景</h3><h4 id=\"1、当前磁盘满了，需要定位大文件并删除\"><a href=\"#1、当前磁盘满了，需要定位大文件并删除\" class=\"headerlink\" title=\"1、当前磁盘满了，需要定位大文件并删除\"></a>1、当前磁盘满了，需要定位大文件并删除</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#1、查看自盘占用\ndf -h\n#2、进入磁盘占用大的目录找到大文件\ndu -h --max-depth&#x3D;1 &#x2F;opt&#x2F; | sort</code></pre>\n<h4 id=\"2、找到-test目录下所有大于1G的-log文件删除\"><a href=\"#2、找到-test目录下所有大于1G的-log文件删除\" class=\"headerlink\" title=\"2、找到/test目录下所有大于1G的.log文件删除\"></a>2、找到/test目录下所有大于1G的.log文件删除</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">find &#x2F;test -name &quot;*.log&quot; -size +1024M -exec rm -rf &#123;&#125; \\;</code></pre>\n\n<h2 id=\"3-处理日志\"><a href=\"#3-处理日志\" class=\"headerlink\" title=\"3.处理日志\"></a>3.处理日志</h2><p>包括：</p>\n<ul>\n<li>1、日志内容筛选与编辑;正则匹配，命令行高亮显示</li>\n<li>2、日志文件切割与批处理</li>\n</ul>\n<p><strong>使用到的命令：split cat grep awk sed</strong></p>\n<h3 id=\"3-1-使用的命令\"><a href=\"#3-1-使用的命令\" class=\"headerlink\" title=\"3-1.使用的命令\"></a>3-1.使用的命令</h3><h4 id=\"split命令切割文件\"><a href=\"#split命令切割文件\" class=\"headerlink\" title=\"split命令切割文件\"></a>split命令切割文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#用法\nsplit [-b ][-C ][-][-l ][要切割的文件][输出文件名前缀][-a ]\n#常用参数：\n-b: 指定拆分文件大小，也可以指定 K、M、G、T 等单位\n-l: 指定每多少行要拆分成一个文件\n-d: 使用数字作为拆分文件的后缀\n-a: 指定后缀长度\n# 将test.log拆分成每个文件大小不超过1M，且命名采用test_01,test_02...的文件\nsplit -b 1M -d test.log test_\n# 将test.log拆分成每个文件不超过100行，且命名采用test_01,test_02...的文件\nsplit -l 100 -d test.log test_</code></pre>\n<h4 id=\"tail命令分析日志文件\"><a href=\"#tail命令分析日志文件\" class=\"headerlink\" title=\"tail命令分析日志文件\"></a>tail命令分析日志文件</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n-f: 当文件增长时，持续输出\n-n: 输出文件最后n行，而不是默认的最后10行\n--pid: 与-f结合使用，在PID终止后结束 --\n-q: 不输出文件名\n-s: 与-f结合使用，-s&#x3D;n：每次输出间隔n秒\n-v: 输出文件名\n# 输出test.log\ntail -f test.log\n# 输出test.log和error.log\ntail -f test.log error.log\n# 输出test.log中最后200行的内容\ntail -n 200 test.log</code></pre>\n<h4 id=\"与head、grep、正则的配合使用\"><a href=\"#与head、grep、正则的配合使用\" class=\"headerlink\" title=\"与head、grep、正则的配合使用\"></a>与head、grep、正则的配合使用</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#head常用参数\n-n: 显示起始的n行，非默认的10行\n-v: 显示文件名\n-q: 不显示文件名\n#grep常用参数\n-v: 不包含匹配的所有行\n-c: 计算符合匹配的列数\n-w: 只显示完整匹配的结果，不包括部分匹配，比如匹配要求是apple，则只有准确地为apple的内容会返回\n-e: 后面接正则条件，一个参数只能加一个条件\n-E: 后面接正则条件，一个参数可以加多个条件\n-i: 忽略大小写\n-o: 只显示匹配pattern的部分\n-n: 输出内容时添加结果所在的行号\n-r: 递归匹配\n-color: -color&#x3D;auto &#x2F; always &#x2F; never;\n#a,b的意义分别表示加颜色的方式和颜色值\nexport GREP_COLOR&#x3D;&#39;a;b&#39;\n#a取值范围:【0,1,4,5,7,8】 0关闭所有属性; 1设置高亮度; 4下划线; 5闪烁; 7反显; 8消隐; \n#b取值范围:【30-37或40-47】30 black 31 red 32 green 33 yellow 34 blue 35 purple 36 cyan 37 white 30—37 设置前景色 40—47 设置背景色\n-A: 打印出紧随匹配的行之后的下文 NUM 行\n-B: 打印出匹配的行之前的上文 NUM 行\n-C: 打印出匹配的行的上下文前后各 NUM 行\n\n#pattern的常用参数\n\n# 输出test.log的第100行到第200行\ncat test.log | head -n 200 | tail -n 100\n# 持续输出test.log中包含”Listener“的行\ntail -f jmeter.log | grep &quot;Listener&quot;</code></pre>\n\n<h4 id=\"awk处理列数据\"><a href=\"#awk处理列数据\" class=\"headerlink\" title=\"awk处理列数据\"></a>awk处理列数据</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#用法 pattern：匹配内容；action：找到匹配后对每一行执行的操作\nawk &#39;&#123;pattern + action&#125;&#39; &#123;filenames&#125;\n#内置变量：\n$0: 整行\n$1~n: 第n列\nNF: 字段数量\nNR: 行数\nFS: -F 分隔字段符号，可以传一个或多个\nBEGIN和END模块\n#输出test.log的第100行到第200行使用awk实现\nawk &#39;&#123;if(NR&gt;100 &amp;&amp; NR&lt;200)print $0 &#125;&#39; test.log\n#输出test.log中带有https的行中第二列是200的内容\ncat test.log | grep -w &#39;https&#39; | awk &#39;&#123;if ($2 &#x3D;&#x3D; 200)print&#125;&#39;\n#统计test.log中带有https的行中第二列是200的数量\n## 注意在加入BEGIN和END语句之后，不要忘记分号\ncat test.log | grep -w &#39;https&#39; | awk &#39;&#123;count++;if ($2 &#x3D;&#x3D; 200);&#125; END&#123;print &quot;total 200 is&quot;,count&#125;&#39;\n# \n</code></pre>\n<h4 id=\"sed处理行数据、替换数据\"><a href=\"#sed处理行数据、替换数据\" class=\"headerlink\" title=\"sed处理行数据、替换数据\"></a>sed处理行数据、替换数据</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#常用参数：\n</code></pre>\n\n<h3 id=\"3-2-场景\"><a href=\"#3-2-场景\" class=\"headerlink\" title=\"3-2.场景\"></a>3-2.场景</h3><h4 id=\"1、匹配输出test-log中带有https的行并高亮显示\"><a href=\"#1、匹配输出test-log中带有https的行并高亮显示\" class=\"headerlink\" title=\"1、匹配输出test.log中带有https的行并高亮显示\"></a>1、匹配输出test.log中带有https的行并高亮显示</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 这里grep使用-w参数为了过滤带有http的行，只匹配完全是https的行\ntail -f test.log | grep -w &quot;https&quot; --color&#x3D;auto</code></pre>\n<h4 id=\"2、统计Nginx日志中访问量前10的IP\"><a href=\"#2、统计Nginx日志中访问量前10的IP\" class=\"headerlink\" title=\"2、统计Nginx日志中访问量前10的IP\"></a>2、统计Nginx日志中访问量前10的IP</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 注意参数-n，不使用-n参数会得到错误的结果\n\nawk &#39;&#123;a[$1]++&#125; END&#123;for(i in a)print i,a[i]&#125;&#39; access.log | sort -n -r -k 2 | head -10 </code></pre>\n<h4 id=\"3、统计Nginx日志中访问超过10次的IP\"><a href=\"#3、统计Nginx日志中访问超过10次的IP\" class=\"headerlink\" title=\"3、统计Nginx日志中访问超过10次的IP\"></a>3、统计Nginx日志中访问超过10次的IP</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">awk &#39;&#123;a[$1]++&#125; END&#123;for(i in a)&#123;if(a[i]&gt;10)print i,a[i]&#125;&#125;&#39; access.log | sort -nr -k 2 </code></pre>\n<h4 id=\"4、统计每个IP访问结果状态码的数量\"><a href=\"#4、统计每个IP访问结果状态码的数量\" class=\"headerlink\" title=\"4、统计每个IP访问结果状态码的数量\"></a>4、统计每个IP访问结果状态码的数量</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#方法一，使用awk统计\nawk &#39;&#123;a[$1&quot; &quot;$13]++&#125;END&#123;for(i in a)print i,a[i]&#125;&#39; access.log | sort -r\n#方法二，使用uniq做去重和统计\nawk &#39;&#123;print $1 &quot; &quot;$13&#125;&#39; access.log | sort -r | uniq -c</code></pre>\n<h2 id=\"4-端口、进程操作\"><a href=\"#4-端口、进程操作\" class=\"headerlink\" title=\"4.端口、进程操作\"></a>4.端口、进程操作</h2><h2 id=\"5-crontab定时任务\"><a href=\"#5-crontab定时任务\" class=\"headerlink\" title=\"5.crontab定时任务\"></a>5.crontab定时任务</h2><h2 id=\"6-自定义快捷命令\"><a href=\"#6-自定义快捷命令\" class=\"headerlink\" title=\"6.自定义快捷命令\"></a>6.自定义快捷命令</h2><p>编写shell函数的sh文件，将路径放在当前shell的环境变量下，即可在命令行中通过命令的形式调用函数</p>\n<h2 id=\"7-其他常规操作\"><a href=\"#7-其他常规操作\" class=\"headerlink\" title=\"7.其他常规操作\"></a>7.其他常规操作</h2>"},{"title":"测试中的Python多线程实践","date":"2022-01-26T08:36:49.000Z","cover":"hhttps://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg","_content":"","source":"_posts/测试中的Python多线程实践.md","raw":"title: 测试中的Python多线程实践\n\ndate: 2022-01-26 16:36:49\n\ntags:\n\n- 多线程\n\ncategories:\n\n- Python\n\ncover: hhttps://tianmy.oss-cn-shanghai.aliyuncs.com/img/python.jpg\n\n---\n","slug":"测试中的Python多线程实践","published":1,"updated":"2022-01-26T08:38:54.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1s3001fo80qbmuydut2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"测试框架中的设计模式实践","date":"2022-01-26T04:11:25.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg","_content":"","source":"_posts/测试框架中的设计模式实践.md","raw":"title: 测试框架中的设计模式实践\n\ndate: 2022-01-26 12:11:25\n\ntags:\n\n- 设计模式\n\ncategories:\n\n- 设计模式\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg\n\n---\n","slug":"测试框架中的设计模式实践","published":1,"updated":"2022-01-26T04:20:08.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1s4001io80q25a11v6i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"测试需求分析","date":"2022-01-25T08:34:37.000Z","cover":"https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg","_content":"\n## 测试分析\n\n**思路：首先梳理出主干流程->然后梳理流程中所有可能的路径**\n\n### 1、首先梳理出主干流程\n\n主谓宾\n\n### 2、然后梳理流程中所有可能的路径\n\n关注的点：\n\n#### 2-1、对于状态流转：\n\n不同角色\n\n不同操作\n\n不同状态变化规则\n\n是否按照以上三点进行拆分，比如不同的角色是否会影响规则，如果有影响，则拆分为多个流程\n\n### 2-2、对于流程的起点，终点，节点：\n\n数据从哪里来，到哪里去，节点如何处理输入的数据（这里不是指技术上的处理，指的是业务上的）\n\n是否依赖第三方\n\n各个节点/依赖方的状态变化时，规则如何处理\n\n#### 2-3、从用户、业务的角度思考\n\n用户角度：\n\n行为的合理性\n\n易用性\n\n页面布局 配色\n\n业务角度：\n\n流程的合理性、流畅性、完整性（流程有没有闭环，有没有缺失的场景）\n\n#### 2-4、非功能性需求\n\n安全\n\n性能\n","source":"_posts/测试需求分析.md","raw":"title: 测试需求分析\n\ndate: 2022-01-25 16:34:37\n\ntags:\n\n- 需求分析\n- 测试分析\n\ncategories:\n\n- 软件测试\n\ncover: https://tianmy.oss-cn-shanghai.aliyuncs.com/img/测试分析.jpg\n\n---\n\n## 测试分析\n\n**思路：首先梳理出主干流程->然后梳理流程中所有可能的路径**\n\n### 1、首先梳理出主干流程\n\n主谓宾\n\n### 2、然后梳理流程中所有可能的路径\n\n关注的点：\n\n#### 2-1、对于状态流转：\n\n不同角色\n\n不同操作\n\n不同状态变化规则\n\n是否按照以上三点进行拆分，比如不同的角色是否会影响规则，如果有影响，则拆分为多个流程\n\n### 2-2、对于流程的起点，终点，节点：\n\n数据从哪里来，到哪里去，节点如何处理输入的数据（这里不是指技术上的处理，指的是业务上的）\n\n是否依赖第三方\n\n各个节点/依赖方的状态变化时，规则如何处理\n\n#### 2-3、从用户、业务的角度思考\n\n用户角度：\n\n行为的合理性\n\n易用性\n\n页面布局 配色\n\n业务角度：\n\n流程的合理性、流畅性、完整性（流程有没有闭环，有没有缺失的场景）\n\n#### 2-4、非功能性需求\n\n安全\n\n性能\n","slug":"测试需求分析","published":1,"updated":"2022-01-25T08:35:12.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyy5t1s5001lo80qfwqq5elt","content":"<h2 id=\"测试分析\"><a href=\"#测试分析\" class=\"headerlink\" title=\"测试分析\"></a>测试分析</h2><p><strong>思路：首先梳理出主干流程-&gt;然后梳理流程中所有可能的路径</strong></p>\n<h3 id=\"1、首先梳理出主干流程\"><a href=\"#1、首先梳理出主干流程\" class=\"headerlink\" title=\"1、首先梳理出主干流程\"></a>1、首先梳理出主干流程</h3><p>主谓宾</p>\n<h3 id=\"2、然后梳理流程中所有可能的路径\"><a href=\"#2、然后梳理流程中所有可能的路径\" class=\"headerlink\" title=\"2、然后梳理流程中所有可能的路径\"></a>2、然后梳理流程中所有可能的路径</h3><p>关注的点：</p>\n<h4 id=\"2-1、对于状态流转：\"><a href=\"#2-1、对于状态流转：\" class=\"headerlink\" title=\"2-1、对于状态流转：\"></a>2-1、对于状态流转：</h4><p>不同角色</p>\n<p>不同操作</p>\n<p>不同状态变化规则</p>\n<p>是否按照以上三点进行拆分，比如不同的角色是否会影响规则，如果有影响，则拆分为多个流程</p>\n<h3 id=\"2-2、对于流程的起点，终点，节点：\"><a href=\"#2-2、对于流程的起点，终点，节点：\" class=\"headerlink\" title=\"2-2、对于流程的起点，终点，节点：\"></a>2-2、对于流程的起点，终点，节点：</h3><p>数据从哪里来，到哪里去，节点如何处理输入的数据（这里不是指技术上的处理，指的是业务上的）</p>\n<p>是否依赖第三方</p>\n<p>各个节点/依赖方的状态变化时，规则如何处理</p>\n<h4 id=\"2-3、从用户、业务的角度思考\"><a href=\"#2-3、从用户、业务的角度思考\" class=\"headerlink\" title=\"2-3、从用户、业务的角度思考\"></a>2-3、从用户、业务的角度思考</h4><p>用户角度：</p>\n<p>行为的合理性</p>\n<p>易用性</p>\n<p>页面布局 配色</p>\n<p>业务角度：</p>\n<p>流程的合理性、流畅性、完整性（流程有没有闭环，有没有缺失的场景）</p>\n<h4 id=\"2-4、非功能性需求\"><a href=\"#2-4、非功能性需求\" class=\"headerlink\" title=\"2-4、非功能性需求\"></a>2-4、非功能性需求</h4><p>安全</p>\n<p>性能</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"测试分析\"><a href=\"#测试分析\" class=\"headerlink\" title=\"测试分析\"></a>测试分析</h2><p><strong>思路：首先梳理出主干流程-&gt;然后梳理流程中所有可能的路径</strong></p>\n<h3 id=\"1、首先梳理出主干流程\"><a href=\"#1、首先梳理出主干流程\" class=\"headerlink\" title=\"1、首先梳理出主干流程\"></a>1、首先梳理出主干流程</h3><p>主谓宾</p>\n<h3 id=\"2、然后梳理流程中所有可能的路径\"><a href=\"#2、然后梳理流程中所有可能的路径\" class=\"headerlink\" title=\"2、然后梳理流程中所有可能的路径\"></a>2、然后梳理流程中所有可能的路径</h3><p>关注的点：</p>\n<h4 id=\"2-1、对于状态流转：\"><a href=\"#2-1、对于状态流转：\" class=\"headerlink\" title=\"2-1、对于状态流转：\"></a>2-1、对于状态流转：</h4><p>不同角色</p>\n<p>不同操作</p>\n<p>不同状态变化规则</p>\n<p>是否按照以上三点进行拆分，比如不同的角色是否会影响规则，如果有影响，则拆分为多个流程</p>\n<h3 id=\"2-2、对于流程的起点，终点，节点：\"><a href=\"#2-2、对于流程的起点，终点，节点：\" class=\"headerlink\" title=\"2-2、对于流程的起点，终点，节点：\"></a>2-2、对于流程的起点，终点，节点：</h3><p>数据从哪里来，到哪里去，节点如何处理输入的数据（这里不是指技术上的处理，指的是业务上的）</p>\n<p>是否依赖第三方</p>\n<p>各个节点/依赖方的状态变化时，规则如何处理</p>\n<h4 id=\"2-3、从用户、业务的角度思考\"><a href=\"#2-3、从用户、业务的角度思考\" class=\"headerlink\" title=\"2-3、从用户、业务的角度思考\"></a>2-3、从用户、业务的角度思考</h4><p>用户角度：</p>\n<p>行为的合理性</p>\n<p>易用性</p>\n<p>页面布局 配色</p>\n<p>业务角度：</p>\n<p>流程的合理性、流畅性、完整性（流程有没有闭环，有没有缺失的场景）</p>\n<h4 id=\"2-4、非功能性需求\"><a href=\"#2-4、非功能性需求\" class=\"headerlink\" title=\"2-4、非功能性需求\"></a>2-4、非功能性需求</h4><p>安全</p>\n<p>性能</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyy5t1r70005o80qaop39dtm","category_id":"ckyy5t1r30002o80q7faoh9kh","_id":"ckyy5t1rd000co80qbfcx5vd3"},{"post_id":"ckyy5t1qv0000o80qcwhmhxac","category_id":"ckyy5t1r30002o80q7faoh9kh","_id":"ckyy5t1rg000go80q5tb3gvyz"},{"post_id":"ckyy5t1r10001o80q5dcl96dn","category_id":"ckyy5t1r30002o80q7faoh9kh","_id":"ckyy5t1ri000ko80q26w545qn"},{"post_id":"ckyy5t1r50004o80q0rake0ru","category_id":"ckyy5t1r30002o80q7faoh9kh","_id":"ckyy5t1rl000po80q0r2l5ysf"},{"post_id":"ckyy5t1r80006o80qhbuc8u2j","category_id":"ckyy5t1rh000jo80q58j16cem","_id":"ckyy5t1rt000wo80qe3gdgjn4"},{"post_id":"ckyy5t1rb000ao80q33wy1l0u","category_id":"ckyy5t1rl000qo80q2rnb9h4f","_id":"ckyy5t1rx0012o80q2imact7w"},{"post_id":"ckyy5t1rd000bo80qaz77gar9","category_id":"ckyy5t1rl000qo80q2rnb9h4f","_id":"ckyy5t1s00018o80q6soj8nkh"},{"post_id":"ckyy5t1rx0013o80qdptbf13u","category_id":"ckyy5t1rl000qo80q2rnb9h4f","_id":"ckyy5t1s2001do80qhf4p4pyl"},{"post_id":"ckyy5t1rf000fo80q2pj41zb7","category_id":"ckyy5t1rl000qo80q2rnb9h4f","_id":"ckyy5t1s3001go80q0u05gvau"},{"post_id":"ckyy5t1rh000io80q2y7qaqdt","category_id":"ckyy5t1rz0017o80q69v77kj0","_id":"ckyy5t1s5001ko80qfl5oce34"},{"post_id":"ckyy5t1ri000mo80q3habajga","category_id":"ckyy5t1s3001eo80q5kunbq9f","_id":"ckyy5t1s8001po80qbkmo696s"},{"post_id":"ckyy5t1rk000oo80q3fgn3lgw","category_id":"ckyy5t1s6001mo80qeqsz2a9l","_id":"ckyy5t1s9001to80q2q0i1cc3"},{"post_id":"ckyy5t1rm000to80q7a488x9z","category_id":"ckyy5t1s8001qo80q2rl070v1","_id":"ckyy5t1sa001xo80q9j6oaroz"},{"post_id":"ckyy5t1rs000vo80qd2zueamz","category_id":"ckyy5t1s9001vo80q3z2f4gz1","_id":"ckyy5t1sb0023o80q0rye3t61"},{"post_id":"ckyy5t1ru000zo80q9z97gdc0","category_id":"ckyy5t1s9001vo80q3z2f4gz1","_id":"ckyy5t1sc0026o80qch7q0izz"},{"post_id":"ckyy5t1rw0010o80qati85a03","category_id":"ckyy5t1sb0022o80qdpjd0qal","_id":"ckyy5t1sd002ao80qcc7d18o0"},{"post_id":"ckyy5t1ry0016o80q3rsxggh3","category_id":"ckyy5t1sc0027o80qblvkf5o1","_id":"ckyy5t1se002eo80q3gud9aev"},{"post_id":"ckyy5t1s0001ao80qcpqjbg68","category_id":"ckyy5t1sb0022o80qdpjd0qal","_id":"ckyy5t1sf002io80q5con55jl"},{"post_id":"ckyy5t1s2001co80q4vpv4zbc","category_id":"ckyy5t1s6001mo80qeqsz2a9l","_id":"ckyy5t1sh002no80qctjz4s0j"},{"post_id":"ckyy5t1s3001fo80qbmuydut2","category_id":"ckyy5t1s9001vo80q3z2f4gz1","_id":"ckyy5t1si002qo80q397w152h"},{"post_id":"ckyy5t1s4001io80q25a11v6i","category_id":"ckyy5t1sg002mo80q88hd7jw6","_id":"ckyy5t1sj002to80q7q2ocb9m"},{"post_id":"ckyy5t1s5001lo80qfwqq5elt","category_id":"ckyy5t1si002ro80q0k3idjk7","_id":"ckyy5t1sk002wo80q43u15sja"}],"PostTag":[{"post_id":"ckyy5t1qv0000o80qcwhmhxac","tag_id":"ckyy5t1r50003o80qdkpo49dn","_id":"ckyy5t1rb0009o80qdcjx07xw"},{"post_id":"ckyy5t1r10001o80q5dcl96dn","tag_id":"ckyy5t1r90008o80q3vpe67e1","_id":"ckyy5t1rg000ho80qay9n6kip"},{"post_id":"ckyy5t1r50004o80q0rake0ru","tag_id":"ckyy5t1re000eo80q4mubco8i","_id":"ckyy5t1rk000no80qdgks4fo5"},{"post_id":"ckyy5t1ri000mo80q3habajga","tag_id":"ckyy5t1r90008o80q3vpe67e1","_id":"ckyy5t1rm000so80q5eeh167b"},{"post_id":"ckyy5t1r70005o80qaop39dtm","tag_id":"ckyy5t1r90008o80q3vpe67e1","_id":"ckyy5t1rs000uo80q6cgsbq2y"},{"post_id":"ckyy5t1r80006o80qhbuc8u2j","tag_id":"ckyy5t1rm000ro80qhvxratsw","_id":"ckyy5t1ry0015o80qaau3bk1p"},{"post_id":"ckyy5t1r80006o80qhbuc8u2j","tag_id":"ckyy5t1ru000yo80q2uww7o73","_id":"ckyy5t1s00019o80q54he1dnj"},{"post_id":"ckyy5t1rb000ao80q33wy1l0u","tag_id":"ckyy5t1ry0014o80qg00ad69b","_id":"ckyy5t1s5001jo80qfg9g2rp3"},{"post_id":"ckyy5t1rb000ao80q33wy1l0u","tag_id":"ckyy5t1s1001bo80qab6g1mr6","_id":"ckyy5t1s7001no80qf6exc3pn"},{"post_id":"ckyy5t1rd000bo80qaz77gar9","tag_id":"ckyy5t1ry0014o80qg00ad69b","_id":"ckyy5t1s9001so80q878oaiaz"},{"post_id":"ckyy5t1rd000bo80qaz77gar9","tag_id":"ckyy5t1s1001bo80qab6g1mr6","_id":"ckyy5t1s9001uo80q21999ey7"},{"post_id":"ckyy5t1rf000fo80q2pj41zb7","tag_id":"ckyy5t1ry0014o80qg00ad69b","_id":"ckyy5t1sb0020o80q7x378w7u"},{"post_id":"ckyy5t1rf000fo80q2pj41zb7","tag_id":"ckyy5t1s1001bo80qab6g1mr6","_id":"ckyy5t1sb0021o80q3eezgqb3"},{"post_id":"ckyy5t1rh000io80q2y7qaqdt","tag_id":"ckyy5t1sa001yo80qaa18hr2a","_id":"ckyy5t1sc0025o80q467fc3vk"},{"post_id":"ckyy5t1rk000oo80q3fgn3lgw","tag_id":"ckyy5t1sb0024o80q0h04ess6","_id":"ckyy5t1sd0029o80qf43x8pvd"},{"post_id":"ckyy5t1rm000to80q7a488x9z","tag_id":"ckyy5t1sc0028o80qae3ngd33","_id":"ckyy5t1sf002go80q2wdaavy1"},{"post_id":"ckyy5t1rm000to80q7a488x9z","tag_id":"ckyy5t1sd002co80q72af2ydy","_id":"ckyy5t1sf002jo80qhdrncv6o"},{"post_id":"ckyy5t1rs000vo80qd2zueamz","tag_id":"ckyy5t1se002fo80q5fy46xlh","_id":"ckyy5t1sg002lo80q3rsce86o"},{"post_id":"ckyy5t1ru000zo80q9z97gdc0","tag_id":"ckyy5t1se002fo80q5fy46xlh","_id":"ckyy5t1si002po80q1zl292j8"},{"post_id":"ckyy5t1rw0010o80qati85a03","tag_id":"ckyy5t1sh002oo80qfpq3hl84","_id":"ckyy5t1sj002vo80qhsuv28lx"},{"post_id":"ckyy5t1rw0010o80qati85a03","tag_id":"ckyy5t1si002so80qffz60piq","_id":"ckyy5t1sk002xo80q5dnbcl5x"},{"post_id":"ckyy5t1rx0013o80qdptbf13u","tag_id":"ckyy5t1sj002uo80qa8n3c208","_id":"ckyy5t1sl0030o80qd3o8ea9m"},{"post_id":"ckyy5t1rx0013o80qdptbf13u","tag_id":"ckyy5t1sk002yo80q665bc2j7","_id":"ckyy5t1sl0031o80q2xpg5bye"},{"post_id":"ckyy5t1ry0016o80q3rsxggh3","tag_id":"ckyy5t1sk002zo80qcc1u9byv","_id":"ckyy5t1sm0035o80qb2zc8mcv"},{"post_id":"ckyy5t1ry0016o80q3rsxggh3","tag_id":"ckyy5t1sl0032o80qfr9gh2pw","_id":"ckyy5t1sm0036o80q35ur2mto"},{"post_id":"ckyy5t1ry0016o80q3rsxggh3","tag_id":"ckyy5t1sl0033o80qdnkf0tse","_id":"ckyy5t1sn0038o80q687pbtct"},{"post_id":"ckyy5t1s0001ao80qcpqjbg68","tag_id":"ckyy5t1sm0034o80qagzdfzt7","_id":"ckyy5t1sn0039o80qee0356dn"},{"post_id":"ckyy5t1s2001co80q4vpv4zbc","tag_id":"ckyy5t1sb0024o80q0h04ess6","_id":"ckyy5t1so003co80q2vl64bnx"},{"post_id":"ckyy5t1s2001co80q4vpv4zbc","tag_id":"ckyy5t1sn003ao80qd42bami9","_id":"ckyy5t1so003do80qh46tao65"},{"post_id":"ckyy5t1s3001fo80qbmuydut2","tag_id":"ckyy5t1so003bo80q19aph0ew","_id":"ckyy5t1sr003fo80q0ey04tcs"},{"post_id":"ckyy5t1s4001io80q25a11v6i","tag_id":"ckyy5t1so003eo80qh80bd3hv","_id":"ckyy5t1sr003ho80qaem42vqo"},{"post_id":"ckyy5t1s5001lo80qfwqq5elt","tag_id":"ckyy5t1sj002uo80qa8n3c208","_id":"ckyy5t1ss003jo80qaterbymu"},{"post_id":"ckyy5t1s5001lo80qfwqq5elt","tag_id":"ckyy5t1sk002yo80q665bc2j7","_id":"ckyy5t1ss003ko80qgxrz2bhk"}],"Tag":[{"name":"Docker基础","_id":"ckyy5t1r50003o80qdkpo49dn"},{"name":"docker","_id":"ckyy5t1r90008o80q3vpe67e1"},{"name":"Docker网络","_id":"ckyy5t1re000eo80q4mubco8i"},{"name":"分支管理","_id":"ckyy5t1rm000ro80qhvxratsw"},{"name":"版本管理","_id":"ckyy5t1ru000yo80q2uww7o73"},{"name":"JMeter","_id":"ckyy5t1ry0014o80qg00ad69b"},{"name":"源码","_id":"ckyy5t1s1001bo80qab6g1mr6"},{"name":"环境治理","_id":"ckyy5t1sa001yo80qaa18hr2a"},{"name":"Linux","_id":"ckyy5t1sb0024o80q0h04ess6"},{"name":"Nginx","_id":"ckyy5t1sc0028o80qae3ngd33"},{"name":"工具","_id":"ckyy5t1sd002co80q72af2ydy"},{"name":"python语法","_id":"ckyy5t1se002fo80q5fy46xlh"},{"name":"自动化","_id":"ckyy5t1sh002oo80qfpq3hl84"},{"name":"UI自动化","_id":"ckyy5t1si002so80qffz60piq"},{"name":"需求分析","_id":"ckyy5t1sj002uo80qa8n3c208"},{"name":"测试分析","_id":"ckyy5t1sk002yo80q665bc2j7"},{"name":"java","_id":"ckyy5t1sk002zo80qcc1u9byv"},{"name":"覆盖度","_id":"ckyy5t1sl0032o80qfr9gh2pw"},{"name":"精准测试","_id":"ckyy5t1sl0033o80qdnkf0tse"},{"name":"接口测试","_id":"ckyy5t1sm0034o80qagzdfzt7"},{"name":"Shell","_id":"ckyy5t1sn003ao80qd42bami9"},{"name":"多线程","_id":"ckyy5t1so003bo80q19aph0ew"},{"name":"设计模式","_id":"ckyy5t1so003eo80qh80bd3hv"}]}}